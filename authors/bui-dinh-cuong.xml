<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RICHKA Developer Blog (Posts by Bui Dinh Cuong)</title><link>https://cocktailmake.github.io/</link><description></description><atom:link href="https://cocktailmake.github.io/authors/bui-dinh-cuong.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2021 &lt;a href="mailto:"&gt;RICHKA&lt;/a&gt; </copyright><lastBuildDate>Tue, 05 Jan 2021 13:15:50 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>License check by scancode-toolkit</title><link>https://cocktailmake.github.io/posts/license-check-by-scancode-toolkit/</link><dc:creator>Bui Dinh Cuong</dc:creator><description>&lt;div id="outline-container-orgbc006f8" class="outline-2"&gt;
&lt;h2 id="orgbc006f8"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbc006f8"&gt;
&lt;p&gt;
In this post, we introduce a method of automating the process of Python codes license scanning by using:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;Scancode-toolkit&lt;/code&gt;: To perform code license scanning.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jenkins&lt;/code&gt;: Run this test automatically based on changes of code on target branch.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org58b0a6c" class="outline-2"&gt;
&lt;h2 id="org58b0a6c"&gt;Steps&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org58b0a6c"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0e11ace" class="outline-3"&gt;
&lt;h3 id="org0e11ace"&gt;Prepare environment&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0e11ace"&gt;
&lt;p&gt;
Before we start, make sure the system satisfy below mentioned requirements:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Python3.6 installed&lt;/li&gt;
&lt;li&gt;Git &amp;amp; pip configured&lt;/li&gt;
&lt;li&gt;Jenkins servers installed &amp;amp; configured&lt;/li&gt;
&lt;li&gt;Identify git branch for code scanning&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;Scancode-toolkit&lt;/code&gt; tool (See guide from &lt;a href="https://scancode-toolkit.readthedocs.io/en/latest/getting-started/newcomer.html#installing-scancode"&gt;https://scancode-toolkit.readthedocs.io/en/latest/getting-started/newcomer.html#installing-scancode&lt;/a&gt;). Because our project is using Python3.8 which has not been supported by Scancode-toolkit (&lt;a href="https://scancode-toolkit.readthedocs.io/en/latest/getting-started/install.html"&gt;https://scancode-toolkit.readthedocs.io/en/latest/getting-started/install.html&lt;/a&gt;) so we have to use Miniconda (&lt;a href="https://docs.conda.io/en/latest/miniconda.html"&gt;https://docs.conda.io/en/latest/miniconda.html&lt;/a&gt;) to create Python3.6 environment, build binary version and use it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6b914dc" class="outline-3"&gt;
&lt;h3 id="org6b914dc"&gt;Create Jenkins job&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6b914dc"&gt;
&lt;p&gt;
From home page of Jenkins:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Click "New Item"&lt;/li&gt;
&lt;li&gt;Enter a name of the new job, for example: "Check-License-Scan-Code"&lt;/li&gt;
&lt;li&gt;Choose "Freestyle project" then click "OK" to go to next steps&lt;/li&gt;
&lt;/ul&gt;


&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/license-check-by-scancode-toolkit/step-1.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1e571d9" class="outline-3"&gt;
&lt;h3 id="org1e571d9"&gt;Configure Jenkins job&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1e571d9"&gt;
&lt;p&gt;
After clicking "OK" button in the previous step, we will see a GUI that contains steps to configure Jenkins job. We will go over step by step.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;In "General" step, we should add a description for this Jenkins job and configure log rotation to prevent too many logs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/license-check-by-scancode-toolkit/step-2.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;In "Source Code Management" step, you have to do following actions:

&lt;ul class="org-ul"&gt;
&lt;li&gt;Enter your repository (From GitHub, GitLab, Bitbucket, Backlog, .etc)&lt;/li&gt;
&lt;li&gt;Add credentials that can pull codes from a remote branch and select it.&lt;/li&gt;
&lt;li&gt;Provide a branch that you want to check (In this example, I want to scan stage branch).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Besides, there are many other additional behaviors that you can add more. For example, your project has submodules and need to scan them as well, you can add "Advanced sub-modules behaviors" and do configure. Our project has sub-modules so I added this behavior and do recursively.
&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/license-check-by-scancode-toolkit/step-3.png" alt="nil"&gt;
&lt;/p&gt;


&lt;ul class="org-ul"&gt;
&lt;li&gt;In "Build Triggers" step, there are many options that you can run this job but I will choose "Poll SCM". This will allow me to configure to run this job like a crontab in Linux system. For example, I will run this job once an hour (Using Poll SCM then the job will run if there is a new change of code only). In "Build Environment" step, you can choose some options for building like "Delete workspace before build starts", Add timestamps to the Console Output", .etc. It's up to you. My suggestion is that you should add "Add timestamps to the Console Output" then you can know the build time when checking the output log again.&lt;/li&gt;
&lt;/ul&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/license-check-by-scancode-toolkit/step-4.png" alt="nil"&gt;
&lt;/p&gt;


&lt;ul class="org-ul"&gt;
&lt;li&gt;"Build" step: Because I installed bandit on Jenkins server, so I will choose "Execute shell" for this step. I will use bandit to scan all source folder from git repository and try to find if there is any "High Severity" item. If there is any item, I will use "exit 1" to mark that this build is failed. Otherwise, the build is success. Then we can use "Post-build Actions" to define response actions with each type of status.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Here is content of script that I will run:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;target_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;./source
&lt;span class="nv"&gt;result_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;license-check-result
mkdir -p &lt;span class="nv"&gt;$result_dir&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/lib64
/home/jenkins/toolkits/scancode-toolkit-3.1.1/scancode --license --copyright --summary-with-details --processes &lt;span class="m"&gt;2&lt;/span&gt; --json-pp &lt;span class="nv"&gt;$result_dir&lt;/span&gt;/result.json --html &lt;span class="nv"&gt;$result_dir&lt;/span&gt;/result.html &lt;span class="nv"&gt;$target_dir&lt;/span&gt;
&lt;span class="nv"&gt;parsed_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$result_dir&lt;/span&gt;&lt;span class="s2"&gt;/result1.json"&lt;/span&gt;
&lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;cat &lt;span class="nv"&gt;$result_dir&lt;/span&gt;/result.json&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$JSON&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tr &lt;span class="s1"&gt;'\r\n'&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;'.files[].licenses[].matched_rule.licenses | join(",")'&lt;/span&gt; &amp;gt; &lt;span class="nv"&gt;$parsed_file&lt;/span&gt;

&lt;span class="nv"&gt;gpl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"gpl"&lt;/span&gt;
&lt;span class="nv"&gt;invalid_license_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; line
&lt;span class="k"&gt;do&lt;/span&gt;
	&lt;span class="nv"&gt;licenses&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$line&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s2"&gt;"s/\"//g"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tr &lt;span class="s2"&gt;","&lt;/span&gt; &lt;span class="s2"&gt;"\n"&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
	&lt;span class="nv"&gt;sub_license_valid_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
	&lt;span class="k"&gt;for&lt;/span&gt; license in &lt;span class="nv"&gt;$licenses&lt;/span&gt;
	&lt;span class="k"&gt;do&lt;/span&gt;
	    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$license&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt;  *&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$gpl&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;* &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
		&lt;span class="nv"&gt;sub_license_valid_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;sub_license_valid_count+1&lt;span class="k"&gt;))&lt;/span&gt;
		&lt;span class="nb"&gt;break&lt;/span&gt;
	    &lt;span class="k"&gt;fi&lt;/span&gt;
	&lt;span class="k"&gt;done&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$sub_license_valid_count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
		&lt;span class="nv"&gt;invalid_license_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;invalid_license_count+1&lt;span class="k"&gt;))&lt;/span&gt;
	&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt; &amp;lt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$parsed_file&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$invalid_license_count&lt;/span&gt; -gt &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/license-check-by-scancode-toolkit/step-5.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
"Post-build Actions" will support us to define actions that we want to do when the build is failed. There are many actions that we can choose. Following my opinion, I mostly use "E-mail Notification" then I will know when this job is failed to check and make it works as it should be.
All's done! Now you can click "Save" and then click "Build Now" to build this job. If it's failed, you can go to the failed build and check "Console Output" to find out the reason and fix this. Otherwise, you can sleep well because there is no high severity issues on your code.
&lt;/p&gt;

&lt;p&gt;
Here is an example of an output that you can see on "Console Output" on a build item (You can see it when the job is running, it will be loaded in real-time).
&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/license-check-by-scancode-toolkit/step-6.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Thanks for your reading to the end of this post!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>license</category><guid>https://cocktailmake.github.io/posts/license-check-by-scancode-toolkit/</guid><pubDate>Mon, 04 Jan 2021 00:30:52 GMT</pubDate></item><item><title>Find Security Issues With Bandit</title><link>https://cocktailmake.github.io/posts/find-security-issues-with-bandit/</link><dc:creator>Bui Dinh Cuong</dc:creator><description>&lt;figure&gt;&lt;img src="https://cocktailmake.github.io/images/find-security-issues-with-bandit/jenkins+bandit.png"&gt;&lt;/figure&gt; &lt;div id="outline-container-org5d81642" class="outline-2"&gt;
&lt;h2 id="org5d81642"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5d81642"&gt;
&lt;p&gt;
In this post, we introduce a method of automating the process of code review of Python codes by using:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;Bandit&lt;/code&gt;: To perform code review &amp;amp; find security issues of Python codes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jenkins&lt;/code&gt;: Run this test automatically based on changes of code on target branch.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc76cbd3" class="outline-2"&gt;
&lt;h2 id="orgc76cbd3"&gt;Steps&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc76cbd3"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6c88c67" class="outline-3"&gt;
&lt;h3 id="org6c88c67"&gt;Prepare environment&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6c88c67"&gt;
&lt;p&gt;
Before we start, make sure the system satisfy below mentioned requirements:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Python2.7/Python3 installed&lt;/li&gt;
&lt;li&gt;Git &amp;amp; pip configured&lt;/li&gt;
&lt;li&gt;Jenkins servers installed &amp;amp; configured&lt;/li&gt;
&lt;li&gt;Identify git branch for code scanning&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;bandit&lt;/code&gt; tool (See guide from &lt;a href="https://github.com/PyCQA/bandit"&gt;https://github.com/PyCQA/bandit&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6ff57b9" class="outline-3"&gt;
&lt;h3 id="org6ff57b9"&gt;Create Jenkins job&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6ff57b9"&gt;
&lt;p&gt;
From home page of Jenkins:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Click "New Item"&lt;/li&gt;
&lt;li&gt;Enter a name of the new job, for example: "Security-Issues-Scanner"&lt;/li&gt;
&lt;li&gt;Choose "Freestyle project" then click "OK" to go to next steps&lt;/li&gt;
&lt;/ul&gt;


&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/find-security-issues-with-bandit/create-new-jenkins-item.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2a32c7a" class="outline-3"&gt;
&lt;h3 id="org2a32c7a"&gt;Configure Jenkins job&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2a32c7a"&gt;
&lt;p&gt;
After clicking "OK" button in the previous step, we will see a GUI that contains steps to configure Jenkins job. We will go over step by step.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;In "General" step, we should add a description for this Jenkins job and configure log rotation to prevent too many logs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/find-security-issues-with-bandit/general-information.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;In "Source Code Management" step, you have to do following actions:

&lt;ul class="org-ul"&gt;
&lt;li&gt;Enter your repository (From GitHub, GitLab, Bitbucket, Backlog, .etc)&lt;/li&gt;
&lt;li&gt;Add credentials that can pull codes from a remote branch and select it.&lt;/li&gt;
&lt;li&gt;Provide a branch that you want to check (In this example, I want to scan stage branch).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/find-security-issues-with-bandit/source-code-management.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
There are many other additional behaviors that you can add more. For example, your project has submodules and need to scan them as well, you can add "Advanced sub-modules behaviors" and do configure.
Here is list most behaviors that you can add:
&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/find-security-issues-with-bandit/source-code-additional-behaviors.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;In "Build Triggers" step, there are many options that you can run this job but I will choose "Poll SCM". This will allow me to configure to run this job like a crontab in Linux system. For example, I will run this job once an hour (Using Poll SCM then the job will run if there is a new change of code only).&lt;/li&gt;
&lt;/ul&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/find-security-issues-with-bandit/build-trigger-poll-scm.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;In "Build Environment" step, you can choose some options for building like "Delete workspace before build starts", Add timestamps to the Console Output", .etc. It's up to you. My suggestion is that you should add "Add timestamps to the Console Output" then you can know the build time when checking the output log again.&lt;/li&gt;

&lt;li&gt;"Build" step: Because I installed bandit on Jenkins server, so I will choose "Execute shell" for this step. I will use bandit to scan all source folder from git repository and try to find if there is any "High Severity" item. If there is any item, I will use "exit 1" to mark that this build is failed. Otherwise, the build is success. Then we can use "Post-build Actions" to define response actions with each type of status.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Here is content of script that I will run:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bandit -r ./source &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tee ./out.log
&lt;span class="nv"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;grep &lt;span class="s2"&gt;"Severity: High"&lt;/span&gt; ./out.log &lt;span class="p"&gt;|&lt;/span&gt; wc -l&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$num&lt;/span&gt; -eq &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/find-security-issues-with-bandit/build-script.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;"Post-build Actions" will support us to define actions that we want to do when the build is failed. There are many actions that we can choose:&lt;/li&gt;
&lt;/ul&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/find-security-issues-with-bandit/post-build-actions.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
With my opinion, I mostly use "E-mail Notification" then I will know when this job is failed to check and make it works as it should be.
All's done! Now you can click "Save" and then click "Build Now" to build this job. If it's failed, you can go to the failed build and check "Console Output" to find out the reason and fix this. Otherwise, you can sleep well because there is no high severity issues on your code.
&lt;/p&gt;

&lt;p&gt;
Here is an example of an output that you can see on "Console Output" on a build item (You can see it when the job is running, it will be loaded in real-time).
&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/find-security-issues-with-bandit/example-of-output-console.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Thanks for your reading to the end of this post! I also want to thank "Digital Varys" with meaningful preview image!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>bandit</category><category>security</category><guid>https://cocktailmake.github.io/posts/find-security-issues-with-bandit/</guid><pubDate>Sat, 31 Oct 2020 08:43:55 GMT</pubDate></item><item><title>The prototype of Morphing</title><link>https://cocktailmake.github.io/posts/the-prototype-of-morphing/</link><dc:creator>Bui Dinh Cuong</dc:creator><description>&lt;div id="outline-container-orgbef4249" class="outline-2"&gt;
&lt;h2 id="orgbef4249"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbef4249"&gt;
&lt;p&gt;
In this post, we introduce HyperMorph on HTML5 that allow us to create motions of objects and then export these motions into video files.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc592ea6" class="outline-2"&gt;
&lt;h2 id="orgc592ea6"&gt;Definitions&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc592ea6"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2ff595b" class="outline-3"&gt;
&lt;h3 id="org2ff595b"&gt;Morphing&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2ff595b"&gt;
&lt;p&gt;
Morphing is a special effect in motion pictures and animations that change (or morphs) one image or shape into another through a seamless transition. Traditionally such a depiction would be achieved through dissolving techniques on film. Since the early 1990s, this has been replaced by computer software to create more realistic transitions. A similar method is applied to audio recordings in similar fashion, for example, by changing voices or vocal lines.
&lt;/p&gt;

&lt;p&gt;
Source: &lt;a href="https://en.wikipedia.org/wiki/Morphing"&gt;https://en.wikipedia.org/wiki/Morphing&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6ffa1b2" class="outline-3"&gt;
&lt;h3 id="org6ffa1b2"&gt;HyperMorph&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6ffa1b2"&gt;
&lt;p&gt;
There are many terminologies on HyperMorph that you can check on &lt;a href="https://blog.altair.co.kr/wp-content/uploads/2011/03/hypermorph.pdf"&gt;https://blog.altair.co.kr/wp-content/uploads/2011/03/hypermorph.pdf&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Within this post, we just define a simple definition about HyperMorph on video generation. It is a set of points from a 1st image and a corresponding set of points from a 2nd image.
A special effect will change two sets together and makes the 1st image become the 2nd image and vice versa.
When we define enough of points, it will be able to create very smooth video.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org59d60c7" class="outline-2"&gt;
&lt;h2 id="org59d60c7"&gt;How to create HyperMorph from two images with HTML &amp;amp; JavaScript&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org59d60c7"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Define the set of points on the 1st image and a corresponding set of points from 2nd image.&lt;/li&gt;
&lt;li&gt;Using HTML5 canvas to draw a shrink image based on moving points between two sets and merge two images.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/the-prototype-of-morphing/dog_and_cat.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;With each moving step, capture the image on the canvas and add it as a frame of a video.&lt;/li&gt;
&lt;li&gt;When capture enough frames of a video, we can export these frames into a video file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
And here is the output video (I converted to GIF file to display here easily):
&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/the-prototype-of-morphing/video.gif" alt="nil"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://cocktailmake.github.io/posts/the-prototype-of-morphing/</guid><pubDate>Fri, 14 Aug 2020 06:00:00 GMT</pubDate></item></channel></rss>