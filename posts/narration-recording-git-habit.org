#+BEGIN_COMMENT
.. title: Narration Recording Git Habit
.. slug: narration-recording-git-habit
.. date: 2020-08-31 03:43:33 UTC+09:00
.. tags: 
.. category: 
.. link: 
.. description: 
.. type: text
.. author: Duc To

#+END_COMMENT

Please read a good article of Git Workflow [[https://nvie.com/posts/a-successful-git-branching-model/]]

* Branches

** Feature branches

When you develop new features or fix bugs and the total lines will be relatively larger compared with prior ones you developed, then you should create new branches and merge after finishing the developments as general Git culture.

** Staging branch

Primary development branch, feature branches will be merged to staging branch after successfully tested and reviewed.

** Release branches

- On each release, we create a new release branches based on latest stage branch for both recording and video repositories (even thought there may not has any chances since last release for one repository).
- Release branch should be named as release/[release version]
- Sometimes a hotfix is needed and we can apply hotfix commits to release branches

[[img-url:/images/narration-recording-git-habit/hotfix-branches@2x.png]]

** Tags

- Tags are created for both repositores from release branches after release review successfully passed.

[[img-url:/images/narration-recording-git-habit/git-model@2x.png]]

* Commit logs

We apply a 3rd party knowledge for the format of commit logs.
[[https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit]]

Please follow the tiny rule in the article above.

#+BEGIN_SRC sh
<type>(<scope>): <subject>
#+END_SRC

Type : Must be one of the following:

#+BEGIN_SRC sh
feat: A new feature
fix: A bug fix
docs: Documentation only changes
style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
refactor: A code change that neither fixes a bug nor adds a feature
perf: A code change that improves performance
test: Adding missing or correcting existing tests
chore: Changes to the build process or auxiliary tools and libraries such as documentation generation
#+END_SRC

For examples, our commit logs would be below.

#+BEGIN_SRC sh
fix(gui): Fixed file uploading. Refs #REC-XXX
fix(video): Make ffmpeg video generation more stable. Refs #REC-XXX
test(django): Added new tests for admin contract page. Refs #REC-XXX
feat(gui) : Added Narration script function. Refs #REC-XXX 
#+END_SRC

* Utilize special keywords in commit logs

When you commit, please make sure to fill understandable commit logs and use special keywords such as Refs #TICKET_NUMBER to make the references with the corresponding tickets on Backlog. Therefore before committing, please create tickets on Backlog at first and make the references with the commit logs.

* Rules for merging

When merging, be sure to add "--no-ff".
example: ~git merge --no-ff feature/REC-00~

* Modification of DB models

When you modify the models of Django with your tasks, please do that on stage branch at first. We sometimes encountered DB migration issue on stage branch and it also caused runtime issue on our individual working branches. To prevent from happening the same issue, we need a working flow to modify DB models.

- Step 1 : If you need to modify models of Django, checkout stage branch at first
- Step 2 : Modify the models and execute migration against staging DB
- Step 3 : Merge stage branch into your working branches

* Git on emacs

The built-in vc of emacs is enough to handle Git, but *magit* is also worth trying.
