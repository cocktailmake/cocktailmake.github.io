#+OPTIONS: ^:nil
#+BEGIN_COMMENT
.. title: FFmpeg WASM
.. slug: ffmpeg-wasm
.. date: 2020-11-29 23:11:20 UTC+09:00
.. tags: JavaScript, wasm
.. category: Recording
.. link: 
.. description: We evaluated WebAssembly format of ffmpeg for video transcoding on JavaScript.
.. type: text
.. author: Duc To
.. previewimage: TODO
#+END_COMMENT

* Introduction

FFmpeg WASM is a pure WebAssembly / JavaScript port of FFmpeg. It enables video & audio record, convert and stream right inside browsers.
The main Git repository for it is https://github.com/ffmpegwasm/ffmpeg.wasm

Right now, in Recording process, we utilize user experience by uploading video source file directly from front-end web browser to S3 without going through any server using presigned S3 URL. The limitation of the approach is that we cannot convert the source video file as needed without going through the server (which increases a lot of waiting time for end users) Some handly cases for that needs are:

- Unify video source format to mp4 from different video file format (mp4, mov)
- Right now web browser does not support H265 video format and we need to convert to MP4 format to support playing it in web browser

Based on the above needs, we research FFMPEG WASM library as we think that it would be nice if we can do the video conversion directly from web browser

* Licensing

- @ffmpeg/ffmpeg contains kind of a wrapper to handle the complexity of loading core and calling low-level APIs. It is a small code base and under MIT license.

- @ffmpeg/core following the same licenses as FFmpeg and its external libraries.

* How it works

- The only JavaScript file defined in HTML file is https://unpkg.com/@ffmpeg/ffmpeg@0.9.4/dist/ffmpeg.min.js but actually it is just a wrapper.
- Based on the actual need in our triggered ffmpeg function, the JavaScript will load ffmpeg/core file ffmpeg-core.wasm and its JavaScript file ffmpeg-core.js. The size of ffmpeg-core.wasm at the time of testing is 22MB.
- Sometimes we may need to use the newest version of @ffmpeg/core and we can define it using customized path.

#+BEGIN_SRC javascript
const ffmpeg = createFFmpeg({
  corePath: '../../../src/ffmpeg-core.js',
});
#+END_SRC

- We can re-compile ffmpeg-core by checking build.sh inside https://github.com/ffmpegwasm/ffmpeg.wasm-core repository.

* Testing example

[[img-url:/images/ffmpeg-wasm/wasm_sample.png]]

#+BEGIN_SRC html
<body>
  <video id="player" controls></video>
  <input type="file" id="uploader">
  <script src="https://unpkg.com/@ffmpeg/ffmpeg@0.9.4/dist/ffmpeg.min.js"></script>
  <script>
    const { createFFmpeg, fetchFile } = FFmpeg;
    const ffmpeg = createFFmpeg({ log: true });
    const transcode = async ({ target: { files } }) => {
      const { name } = files[0];
      await ffmpeg.load();
      ffmpeg.FS('writeFile', name, await fetchFile(files[0]));
      await ffmpeg.run('-i', name,  'output.mp4');
      //await ffmpeg.run('-i', name, '-q:v', 0, 'output.mp4');
      const data = ffmpeg.FS('readFile', 'output.mp4');
      const video = document.getElementById('player');
      video.src = URL.createObjectURL(new Blob([data.buffer], { type: 'video/mp4' }));
    }

    document.getElementById('uploader').addEventListener('change', transcode);
  </script>
</body>
#+END_SRC

- We have a HTML page with 1 video tag and a file upload button.
- When user click upload button and select a MOV video file, ffmpeg wasm library will be called to converted it to MP4 file (output.mp4).
- When the conversion is completed, JS loads HTML video tag's source with the converted video's data and display on screen.

[[img-url:/images/ffmpeg-wasm/wasm_figure1.png]]

* Testing result

- We made 3 test cases converting from H.265 video file, MOV file which recorded from MacOS and a sample MOV file which we get from the internet to MP# format:
  - Convert the H.265 video to mp4. It is successful but the progress takes very long to complete, more than 6 minutes while if we do it with ffmpeg command it is just around 3 minutes. So nearly double the time.
  - Convert admin_sort MOV video, which I think that you recorded it on Mac device to mp4 format. It is failed after few seconds using FFmpeg WASM library but it is successful using ffmpeg command.
  - Convert the MOV video downloaded from the internet to mp4 format. It is successful and the conversion time is quite fast, around 2 minutes.

At the moment of writing this article, FFmpeg WASM is twice slower and unstable, but it is worth monitoring the future progress, and we may use WASM of ImageMagic in the future.
