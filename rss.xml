<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cocktail-Make Developer Blog</title><link>https://cocktailmake.github.io/</link><description>Transmit technology information from developers.</description><atom:link href="https://cocktailmake.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:"&gt;Cocktail-Make&lt;/a&gt; </copyright><lastBuildDate>Sun, 30 Aug 2020 13:10:14 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Emacs modeline enhancement for Git diff</title><link>https://cocktailmake.github.io/posts/emacs-modeline-enhancement-for-git-diff/</link><dc:creator>Hitoshi Uchida</dc:creator><description>&lt;div id="outline-container-org553a176" class="outline-2"&gt;
&lt;h2 id="org553a176"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org553a176"&gt;
&lt;p&gt;
Emacs has a built-in function vc-mode to work with version control
systems such as CVS, Subversion, Git and so on. It enables to show
diff / commit logs and commit codes without working with the
dedicated commands on terminal applications. For Git, we can operate
general git commands such as status / log / diff / checkout / commit /
push. The screenshot below is a sample of vc-diff command to show git
diff.
&lt;/p&gt;

&lt;p&gt;
In this post, a utility function to enhance vc-diff command for Git is
introduced with changing the behavior of the internal function of
vc-git.el and improve the modeline for efficient coding.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/emacs-modeline-enhancement-for-git-diff/vc.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org826d1b3" class="outline-2"&gt;
&lt;h2 id="org826d1b3"&gt;Show the numbers of diff lines on modeline&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org826d1b3"&gt;
&lt;p&gt;
When we open a file on Emacs tracked by Git, the branch name is shown
on the modeline. This build-in feature is enabled by a lisp function
vc-git-mode-line-string below defined in vc-git.el. We will extend
the build-in behavior with &lt;b&gt;&lt;b&gt;defadvice&lt;/b&gt;&lt;/b&gt; to show the numbers of diff
lines on modeline.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;+---[/usr/share/emacs/26.3/lisp/vc/vc-git.el.gz:339]&lt;/span&gt;
&lt;span class="nv"&gt;| (defun vc-git-mode-line-string (file)&lt;/span&gt;
&lt;span class="nv"&gt;|&lt;/span&gt;   &lt;span class="s"&gt;"Return a string for `vc-mode-line' to put in the mode line for FILE."&lt;/span&gt;
&lt;span class="nv"&gt;|   (let* ((rev (vc-working-revision file 'Git))&lt;/span&gt;
&lt;span class="nv"&gt;|&lt;/span&gt;          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;disp-rev&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;vc-git--symbolic-ref&lt;/span&gt; &lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;|                        (substring rev 0 7)))&lt;/span&gt;
&lt;span class="nv"&gt;|&lt;/span&gt;          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;def-ml&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;vc-default-mode-line-string&lt;/span&gt; &lt;span class="ss"&gt;'Git&lt;/span&gt; &lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nv"&gt;|          (help-echo (get-text-property 0 'help-echo def-ml))&lt;/span&gt;
&lt;span class="nv"&gt;|&lt;/span&gt;          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;face&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;get-text-property&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ss"&gt;'face&lt;/span&gt; &lt;span class="nv"&gt;def-ml&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="nv"&gt;|     (propertize (concat (substring def-ml 0 4) disp-rev)&lt;/span&gt;
&lt;span class="nv"&gt;|&lt;/span&gt;                 &lt;span class="ss"&gt;'face&lt;/span&gt; &lt;span class="nv"&gt;face&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;                 &lt;span class="ss"&gt;'help-echo&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;concat&lt;/span&gt; &lt;span class="nv"&gt;help-echo&lt;/span&gt; &lt;span class="s"&gt;"\nCurrent revision: "&lt;/span&gt; &lt;span class="nv"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="nv"&gt;+---&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
To show the information of git diff, we can get each number of
added/deleted lines with using &lt;b&gt;&lt;b&gt;git diff –numstat – FILE_NAME&lt;/b&gt;&lt;/b&gt;. An
sample output with the command is below and the 1st column is the
numbers of lines added to files and the 2nd one is the ones of deleted
lines. If we execute with specifying a filename, we can get only for the file.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git diff --numstat --
7       6       .bashrc
2       1       .bashrc-common
34      9       .emacs
1       0       .folders
4       4       .ssh/config-home
5       1       emacslib/.aspell.en.pws
4       3       emacslib/meeting-dev.template
2       2       emacslib/my-edit.el
108     11      emacslib/my-org.el
4       60      emacslib/my-wl.el
101     55      emacslib/wl-common.el
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The lisp function below is the final output of the utility function.
The number of added lines is shown with green3 and the one of deleted lines is shown
with a color predefined by font-lock-warning-face.
If there is no diff on the opened file, "✔" is shown.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;defadvice&lt;/span&gt; &lt;span class="nv"&gt;vc-git-mode-line-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;after&lt;/span&gt; &lt;span class="nv"&gt;plus-minus&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;compile&lt;/span&gt; &lt;span class="nv"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;"Show the information of git diff on modeline."&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ad-return-value&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;concat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;propertize&lt;/span&gt; &lt;span class="nv"&gt;ad-return-value&lt;/span&gt; &lt;span class="ss"&gt;'face&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:foreground&lt;/span&gt; &lt;span class="s"&gt;"white"&lt;/span&gt; &lt;span class="ss"&gt;:weight&lt;/span&gt; &lt;span class="nv"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
		&lt;span class="s"&gt;" ["&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;plus-minus&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;vc-git--run-command-string&lt;/span&gt;
				   &lt;span class="nv"&gt;file&lt;/span&gt; &lt;span class="s"&gt;"diff"&lt;/span&gt; &lt;span class="s"&gt;"--numstat"&lt;/span&gt; &lt;span class="s"&gt;"--"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
		  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;plus-minus&lt;/span&gt;
		       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;string-match&lt;/span&gt; &lt;span class="s"&gt;"^\\([0-9]+\\)\t\\([0-9]+\\)\t"&lt;/span&gt; &lt;span class="nv"&gt;plus-minus&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
		       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;concat&lt;/span&gt;
			&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;propertize&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"+%s"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;match-string&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;plus-minus&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ss"&gt;'face&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:foreground&lt;/span&gt; &lt;span class="s"&gt;"green3"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
			&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;propertize&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"-%s"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;match-string&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nv"&gt;plus-minus&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ss"&gt;'face&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:inherit&lt;/span&gt; &lt;span class="nv"&gt;font-lock-warning-face&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
		    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;propertize&lt;/span&gt; &lt;span class="s"&gt;"✔"&lt;/span&gt; &lt;span class="ss"&gt;'face&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:foreground&lt;/span&gt; &lt;span class="s"&gt;"green3"&lt;/span&gt; &lt;span class="ss"&gt;:weight&lt;/span&gt; &lt;span class="nv"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
		&lt;span class="s"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
As a screenshot below, the diff information is shown on modeline with the branch name.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/emacs-modeline-enhancement-for-git-diff/modeline.png" alt="nil"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>git</category><guid>https://cocktailmake.github.io/posts/emacs-modeline-enhancement-for-git-diff/</guid><pubDate>Sun, 30 Aug 2020 13:00:00 GMT</pubDate></item><item><title>The prototype of Morphing</title><link>https://cocktailmake.github.io/posts/the-prototype-of-morphing/</link><dc:creator>Bui Dinh Cuong</dc:creator><description>&lt;div id="outline-container-org2fe7b5e" class="outline-2"&gt;
&lt;h2 id="org2fe7b5e"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2fe7b5e"&gt;
&lt;p&gt;
In this post, we introduce HyperMorph on HTML5 that allow us to create motions of objects and then export these motions into video files.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5d0ff7a" class="outline-2"&gt;
&lt;h2 id="org5d0ff7a"&gt;Definitions&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5d0ff7a"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5992405" class="outline-3"&gt;
&lt;h3 id="org5992405"&gt;Morphing&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5992405"&gt;
&lt;p&gt;
Morphing is a special effect in motion pictures and animations that change (or morphs) one image or shape into another through a seamless transition. Traditionally such a depiction would be achieved through dissolving techniques on film. Since the early 1990s, this has been replaced by computer software to create more realistic transitions. A similar method is applied to audio recordings in similar fashion, for example, by changing voices or vocal lines.
&lt;/p&gt;

&lt;p&gt;
Source: &lt;a href="https://en.wikipedia.org/wiki/Morphing"&gt;https://en.wikipedia.org/wiki/Morphing&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgfb8d30d" class="outline-3"&gt;
&lt;h3 id="orgfb8d30d"&gt;HyperMorph&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgfb8d30d"&gt;
&lt;p&gt;
There are many terminologies on HyperMorph that you can check on &lt;a href="https://blog.altair.co.kr/wp-content/uploads/2011/03/hypermorph.pdf"&gt;https://blog.altair.co.kr/wp-content/uploads/2011/03/hypermorph.pdf&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Within this post, we just define a simple definition about HyperMorph on video generation. It is a set of points from a 1st image and a corresponding set of points from a 2nd image.
A special effect will change two sets together and makes the 1st image become the 2nd image and vice versa.
When we define enough of points, it will be able to create very smooth video.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgecc2545" class="outline-2"&gt;
&lt;h2 id="orgecc2545"&gt;How to create HyperMorph from two images with HTML &amp;amp; JavaScript&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgecc2545"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Define the set of points on the 1st image and a corresponding set of points from 2nd image.&lt;/li&gt;
&lt;li&gt;Using HTML5 canvas to draw a shrink image based on moving points between two sets and merge two images.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/the-prototype-of-morphing/dog_and_cat.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;With each moving step, capture the image on the canvas and add it as a frame of a video.&lt;/li&gt;
&lt;li&gt;When capture enough frames of a video, we can export these frames into a video file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
And here is the output video (I converted to GIF file to display here easily):
&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/the-prototype-of-morphing/video.gif" alt="nil"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://cocktailmake.github.io/posts/the-prototype-of-morphing/</guid><pubDate>Fri, 14 Aug 2020 06:00:00 GMT</pubDate></item><item><title>Using Sentry to debug JavaScript in the RICHKA front end</title><link>https://cocktailmake.github.io/posts/using-sentry-to-debug-javascript-in-the-richka-frontend/</link><dc:creator>Le Thanh Tung</dc:creator><description>&lt;div id="outline-container-orgb65112e" class="outline-2"&gt;
&lt;h2 id="orgb65112e"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb65112e"&gt;
&lt;p&gt;
Sentry is a service that helps you to monitor and fix crashes in realtime.
Sentry has many official Sentry SDKs such as: JavaScript, React-Native, Python, Ruby, PHP, Go, Rust, Java, Objective-C/Swift, C#, Perl, Elixir, Laravel.
In this post, we describe our usage of Sentry for JavaScript to debug RICHKA front end.
After using Sentry for a while, we see a lot of bugs in production environment. Information is quite detailed so it's easy to address.
I rate it very useful to debug in front end.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6c6fa96" class="outline-2"&gt;
&lt;h2 id="org6c6fa96"&gt;General usage of Sentry JavaScript&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6c6fa96"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;First of all, we need to create Sentry account and create Project to debug. We can see debug logs in Sentry account 15-60 seconds after events occurred. Because Sentry account can join many organizations and many Projects so Sentry debug logs can be shared to all of developers.&lt;/li&gt;

&lt;li&gt;In separated logs, we can assign to specific developers and comment, set statuses.&lt;/li&gt;

&lt;li&gt;Because RICHKA Project developed by Django and Python, we configure Sentry JavaScript as base template. In Sentry account management, we can see a configuration or we can see a common JavaScript configuration in &lt;a href="https://docs.sentry.io/sdks/javascript/"&gt;here&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;Sentry integrates many third software : Slack, Git, GitLab, JIRA, Microsoft team, … RICHKA developers discuss in Slack so we integrated Sentry to Slack.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Here are some examples.
&lt;/p&gt;


&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/sentry-javascript/error_detail.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/sentry-javascript/events_before.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orge914c28" class="outline-2"&gt;
&lt;h2 id="orge914c28"&gt;Integration between Sentry debug and Slack&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge914c28"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Create a new channel in Slack.&lt;/li&gt;
&lt;li&gt;Access Sentry project and Settings &amp;gt; Integrations &amp;gt; Slack and login Slack account.&lt;/li&gt;
&lt;li&gt;Assign a channel to report debug logs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/sentry-javascript/slack_report.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
If a debug event occurs, Sentry server will send a post to the channel. Developers can easily track them.
Note: if there're a lot of events, we need to configure number of posts in a channel.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc12db26" class="outline-2"&gt;
&lt;h2 id="orgc12db26"&gt;Customize data in debug log&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc12db26"&gt;
&lt;p&gt;
Because the size of the data sent to Sentry server is limited and length of additional data in Sentry log is too. So we need to create a function to split data.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;function sentry_capture_message(data, extra, message) {
    Sentry.withScope(scope =&amp;gt; {
	if (Array.isArray(data))
	{
	    let i = 0;
	    for (let datum of data){
		if (typeof datum == 'string') {
		    if (datum.length &amp;gt;= 16000 &amp;amp;&amp;amp; datum.length &amp;lt;= 1024 * 1024) {
			let stringArray = datum.split('\n');
			for (let j = 0; j &amp;lt; stringArray.length; j++) {
			    if (stringArray[j].trim().length &amp;gt; 0) {
				i++;
				scope.setExtra(extra + sprintf("%04d",i), stringArray[j]);
			    }
			}
		    }
		}
		else {
		    scope.setExtra(extra + sprintf("%04d",i), datum);
		    i++;
		}
	    }
	}
	else scope.setExtra(extra, data);
	Sentry.captureMessage(message);
    });
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For example about a target function to debug:
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;function deleteSearchKeyword(data_id){
    if($('#stock-video &amp;gt; .stock_list &amp;gt; li.video').length &amp;gt; 0){
	$('#stock-video &amp;gt; .stock_list &amp;gt; li.video').each(function(i, elem){
	    let src = $(elem).find('p span video').attr('src');
	    if(!src || src.endsWith('/static/')){
		$(elem).remove();
	    }
	});
	$('div#stock-video &amp;gt; div.stock_title').hide();
	$('.stock_more').hide();
    }
    if ($('#stock-photo &amp;gt; .stock_list').length &amp;gt; 0 || $('#stock-video &amp;gt; .stock_list').length &amp;gt; 0) {
	var materials_id = [];
	$.each($('.materialIndex'), function(i,v) {
	    materials_id.push($(v).val());
	});
	var el = $('.delete-keyword');
	$.ajax({
	    'url': '/delete_material_when_redirect',
	    'type': 'POST',
	    'data': {
		'video_data_id': data_id,
		'materials_id': materials_id
	    },
	    'dataType': 'json',
	    'async': true,
	    'success': function (response) {
		if (!response.result) {
		    console.warn('削除中にエラーが発生しました : deleteSearchKeyword');
		    sentry_capture_message([data_id, response], 'response', `Delete Material When Redirect Error`);
		}
	    },
	    'error': function(err) {
		sentry_capture_message([data_id, err.responseText], 'response', `Delete Material When Redirect Error`);
	    }
	});
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Here are some of the results after customization.
The logs with prefix response0000, response0044 - response0054 are the ones split by our custom JavaScript function sentry_capture_message.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/sentry-javascript/additonal_data.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/sentry-javascript/additonal_data2.png" alt="nil"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://cocktailmake.github.io/posts/using-sentry-to-debug-javascript-in-the-richka-frontend/</guid><pubDate>Thu, 13 Aug 2020 01:53:48 GMT</pubDate></item><item><title>Released Narration Recording Service</title><link>https://cocktailmake.github.io/posts/released-narration-recording-service/</link><dc:creator>Hitoshi Uchida</dc:creator><description>&lt;div id="outline-container-orgb70beab" class="outline-2"&gt;
&lt;h2 id="orgb70beab"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb70beab"&gt;
&lt;p&gt;
Some RICHKA users requested that they would like to input their
narration into the videos and recently we released a new web
application called &lt;b&gt;&lt;span style="color: red"&gt;ナレ撮り&lt;/span&gt;&lt;/b&gt; which enables users to
record the voice as narration on web browsers and combine them with
video sources and generate videos. And &lt;b&gt;synthesis of speech
technology&lt;/b&gt; to automatically generate voice data with the input texts
is also supported as &lt;b&gt;AI narration mode&lt;/b&gt; and users
don't have input voice.
&lt;/p&gt;

&lt;p&gt;
The screenshot below is the sample of the edit page. The upper left is
a dedicated video player to playback both a video source and recorded
narration with combining them. Users can edit the start time of cues
with dragging the cue point on the seek bar. When users click the
recording button in the lower left, the input voice is recorded
through WebRTC and it is converted to MP3 on the web browsers. The
right side is the narration texts users can add/edit. In the AI
narration mode, the voices are generated with the texts.
&lt;/p&gt;

&lt;p&gt;
After the recording has been done, users click the generation button
in the upper right and it starts to generate a video with combining
the video source and the recorded voices.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/released-narration-recording-service/sample-edit-page.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org74eb542" class="outline-2"&gt;
&lt;h2 id="org74eb542"&gt;Development Environment&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org74eb542"&gt;
&lt;p&gt;
Web servers are based on Django, and additional 8 Python packages such
as Django extensions and boto3 to publish pre-signed S3 URL and WebVTT
parser are integrated. The current total lines of Django is around
3000 and it is still quite small because it is still beta version.
Regarding the front end, 20 OSS libraries such as jQuery, videojs,
videojs marker, RecordRTC etc. are integrated. The current total lines
of JavaScript codes is around 4300 and the font end is also still
quite small.
&lt;/p&gt;

&lt;p&gt;
This product is still beta, and based on the feedback from users, new
advanced features will be continuously added and this project will
also become big service soon such as RICHKA. Regarding the synthesis
of speech technology, we will make a new post and share the detail.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/released-narration-recording-service/technologies.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org78c3043" class="outline-2"&gt;
&lt;h2 id="org78c3043"&gt;Voice Recording&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org78c3043"&gt;
&lt;p&gt;
One of primary features is to record voice per cue point inputted
with the mic. When users click the recording button, the recording
processing is executed with using WebRTC as a diagram below.
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;A user clicks the recording button and records the voice with mic&lt;/li&gt;
&lt;li&gt;The voice data is retrieved with WebRTC API and converted into
MP3 in JavaScript layer. Then it is directly uploaded to S3 with
pre-signed S3 URL.&lt;/li&gt;
&lt;li&gt;To enable the user to listen the recorded voice, our dedicated video
player on JavaScript layer loads the record and initialize to be ready.&lt;/li&gt;
&lt;li&gt;The user can playback the video source with overlaying the recorded
voices without generating a new video on the dedicated video
player.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/released-narration-recording-service/voice-recording.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0403749" class="outline-3"&gt;
&lt;h3 id="org0403749"&gt;Direct Conversion to MP3 on JavaScript layer&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0403749"&gt;
&lt;p&gt;
At the 1st step, the MIME type of the audio data retrieved by WebRTC
is audio/webm in default and it tended to be large data size and the
quality of the voice is a bit higher quality. To adjust the quality
and the data size to match our requirements, we decided to use a
JavaScript library RecordRTC to directly convert to MP3 on JavaScript
layer and upload to S3 without delegating the conversion processing to
servers and Lambda. After we obtain the binary of MP3, we don't
convert to other formats in the data life cycle. The client processing
makes the architecture simpler and doesn't cause any additional load
to the server side.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgaf476c3" class="outline-3"&gt;
&lt;h3 id="orgaf476c3"&gt;Dedicated video player to sync video and voices&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgaf476c3"&gt;
&lt;p&gt;
At the 3rd step, we implemented a dedicated video player to playback
the video source with overlaying the recorded voices without
generating another video. The advantage is users can immediately check
the recording results without waiting for several seconds to generate
new videos. The dedicated video player has internally two players to
playback with synchronizing the video source and the recorded voices.
&lt;/p&gt;

&lt;p&gt;
When the current seek point reaches the next cue point, the video
player loads the corresponding voice data from S3 and make the video
player ready to play.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org67d42df" class="outline-2"&gt;
&lt;h2 id="org67d42df"&gt;Video Generation&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org67d42df"&gt;
&lt;p&gt;
After users have inputted the voices to cue points, user are ready to
generate videos with overlying recorded voices. The generated ones
can be downloaded as independent video file.
&lt;/p&gt;

&lt;p&gt;
When users click the generation button, the generation process is
executed on one of dedicated video servers as steps below.
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;When a user click the generation button, an HTTP POST request is
sent to one of web servers behind of a load balancer.&lt;/li&gt;
&lt;li&gt;The web server retrieves the location of the corresponding voices
of S3 and sends an HTTP request to one of video servers.&lt;/li&gt;
&lt;li&gt;The video server downloads the video source and the recorded voice
files from S3, and generate an MP4 video with overlying the voices
over the video source with using ffmpeg.&lt;/li&gt;
&lt;li&gt;The video server uploads the generated video to S3 with pre-singed S3 URL.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/released-narration-recording-service/video-generation.png" alt="nil"&gt;
&lt;/p&gt;


&lt;p&gt;
At 3rd step to generate the video, the simplified sample command of
ffmpeg is like below.
&lt;/p&gt;

&lt;p target="_blank"&gt;
Each recorded voice stream is overlaid over the audio stream of
the video source with &lt;a href="https://ffmpeg.org/ffmpeg-filters.html#amerge-1" target="_blank"&gt;&lt;b&gt;amerge&lt;/b&gt;&lt;/a&gt; command to multiplex.
&lt;/p&gt;

&lt;p target="_blank"&gt;
And they are concatenated into one audio stream with &lt;a href="https://ffmpeg.org/ffmpeg-filters.html#concat" target="_blank"&gt;&lt;b&gt;concat&lt;/b&gt;&lt;/a&gt; command
as "[m1][s1][m2][s2][m3][m4][s3]concat=n=7:v=0:a=1[out]" in the
filter_complex option.
&lt;/p&gt;

&lt;p target="_blank"&gt;
To keep the original video stream of the video source, the video
stream is directly copied to the output stream with enabling stream
copy mode with &lt;a href="https://ffmpeg.org/ffmpeg.html#Stream-copy" target="_blank"&gt;&lt;b&gt;-c:vcopy&lt;/b&gt;&lt;/a&gt; option. It can avoid needless encoding of
video stream and suppress CPU usage, therefore this command can be
rapidly done.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ffmpeg -i 'vide_source.mp4'
-i 'voice_1.mp3'
-i 'voice_2.mp3'
-i 'voice_3.mp3'
-i 'voice_4.mp3'
-filter_complex '[0:a]atrim=start=0.0:duration=1.87,aformat=sample_fmts=fltp:sample_rates=44100:
channel_layouts=stereo,volume=1,asetpts=PTS-STARTPTS[sm1];[0:a]atrim=start=1.87:duration=0.63,
aformat=sample_fmts=fltp:sample_rates=44100:channel_layouts=stereo,volume=1,asetpts=PTS-STARTPTS[s1];
[0:a]atrim=start=2.5:duration=1.44,aformat=sample_fmts=fltp:sample_rates=44100:channel_layouts=stereo,
volume=1,asetpts=PTS-STARTPTS[sm2];[0:a]atrim=start=3.94:duration=1.56,aformat=sample_fmts=fltp:
sample_rates=44100:channel_layouts=stereo,volume=1,asetpts=PTS-STARTPTS[s2];[0:a]atrim=start=5.5:
duration=2.0,aformat=sample_fmts=fltp:sample_rates=44100:channel_layouts=stereo,volume=1,
asetpts=PTS-STARTPTS[sm3];[0:a]atrim=start=7.5:duration=1.82,aformat=sample_fmts=fltp:sample_rates=44100:
channel_layouts=stereo,volume=1,asetpts=PTS-STARTPTS[sm4];[0:a]atrim=start=9.32,aformat=sample_fmts=fltp:
sample_rates=44100:channel_layouts=stereo,volume=1,asetpts=PTS-STARTPTS[s3];[sm1][1:a]amerge[m1];
[sm2][2:a]amerge[m2];[sm3][3:a]amerge[m3];[sm4][4:a]amerge[m4];[m1][s1][m2][s2][m3][m4][s3]concat=n=7:v=0:a=1[out]'
-c:v copy -map 0:v -map [out] 'out.mp4'
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The figure below represents how merging and concatenating audio
streams work with the ffmpeg command. The concatenated audio stream is
accumulated into an output stream [out] in the command. Then, it is
combined with the video stream of the video source with &lt;b&gt;-c:v copy
-map 0:v -map [out]&lt;/b&gt; and the final result is serialized into a file
out.mp4.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/released-narration-recording-service/audio-merge.png" alt="nil"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://cocktailmake.github.io/posts/released-narration-recording-service/</guid><pubDate>Wed, 12 Aug 2020 06:38:24 GMT</pubDate></item><item><title>Web Workers API</title><link>https://cocktailmake.github.io/posts/web-workers-api/</link><dc:creator>Hitoshi Uchida</dc:creator><description>&lt;div id="outline-container-org4b423c4" class="outline-2"&gt;
&lt;h2 id="org4b423c4"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4b423c4"&gt;
&lt;p&gt;
In this post, we describe Web Workers API which was introduced in 2010 as
one of HTML5. The technology is based on &lt;b&gt;&lt;b&gt;fork&lt;/b&gt;&lt;/b&gt; to create a new sub
process and Web Workers API enables web applications to fork an
independent worker process in JavaScript world. The worker process has
its own memory space and the parent main process isn't affected even
if the forked process is crashed as general process system.
&lt;/p&gt;

&lt;p&gt;
The practical use case is Slack that a dedicated worker process gets
the notification from the server side. The worker process starts to
run when we open on web browsers and it continues to stay until we
close the browser tabs.
&lt;/p&gt;

&lt;p width="1500px"&gt;
&lt;img src="https://cocktailmake.github.io/images/web-workers-api/slack-workers.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgbb3d96e" class="outline-2"&gt;
&lt;h2 id="orgbb3d96e"&gt;Architecture of Web Workers API&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbb3d96e"&gt;
&lt;p&gt;
The usage of Web Workers API is to communicate between a main process
and a worker process with using &lt;b&gt;Worker.prototype.postMessage(message,
[transfer])&lt;/b&gt; and &lt;b&gt;worker.onmessage handler&lt;/b&gt;.  The data sent by
postMessage() is internally converted into string data and passed into
the worker processes. The onmessage() of receiver side is called back
with the posted data.
&lt;/p&gt;

&lt;p&gt;
MDN : &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API"&gt;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&lt;/a&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+--------------+ postMessage()      onmessage() +-------------------+
|              |-------------------------------&amp;gt;|                   |
|   main.js    | onmessage()      postMessage() |     worker.js     |
|              |&amp;lt;-------------------------------|                   |
+--------------+                                +-------------------+
       |
       |
+--------------+
|   main.html  |
+--------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7bb0261" class="outline-3"&gt;
&lt;h3 id="org7bb0261"&gt;Implicit Side effect&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7bb0261"&gt;
&lt;p&gt;
The general use case is to fork tiny processes running for a long time
whose CPU loads are small as general resident application as
Slack. However, we need to carefully consider the use cases before
actually using on production because the load of CPU and consumed
memory may not be small. The fork processing also consumes CPU
resource because it take time to allocate its own memory. In addition,
we should carefully consider the frequency to communicate between the
main process and the worker process because frequent communication
increases the load of CPU. The data sent between them is internally
converted into &lt;b&gt;string data&lt;/b&gt; because the memory space is different and
it is impossible to refer to an address of an object of another process.
&lt;/p&gt;

&lt;p&gt;
It is easy to use Web Worker API, but the developers should understand
the heavy load of internal processing and the background of
independent memory spaces. Otherwise, your web applications would
encounter serious issues of low performance and high CPU usage.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4ee1111" class="outline-2"&gt;
&lt;h2 id="org4ee1111"&gt;#1 Sample program the worker process sends newly found prime&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4ee1111"&gt;
&lt;p&gt;
A 1st sample program is to delegate a dedicated process which
continues to find prime numbers in the worker process and send to the
main process. The sequence diagram between main and worker process is
below.
&lt;/p&gt;

&lt;p width="1500px"&gt;
&lt;img src="https://cocktailmake.github.io/images/web-workers-api/demo-prime-sequence-large.png" alt="nil"&gt;
&lt;/p&gt;


&lt;p&gt;
The source code of main process is below. A worker object is
instantiated with specifying the source file "basic.js" of the worker
process. Then the worker process is internally forked and starts to
run. Then, CPU usage is increased in this timing. Therefore, it is
good strategy to delay the timing to fork until the dedicated process
is actually needed for better performance.
&lt;/p&gt;

&lt;p&gt;
When the worker process finds a new prime, the worker.onmessage(event)
of main process is called back and the prime data can be retrieved
with event.data.
&lt;/p&gt;

&lt;p&gt;
In this sample program, the worker process continues to find new prime
numbers forever, therefore we need a stop button to terminate the
worker process with using worker.terminate().
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang="ja"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
    &amp;lt;script type="text/javascript" src="https://code.jquery.com/jquery-1.9.1.min.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;button id="start"&amp;gt;Start&amp;lt;/button&amp;gt;
    &amp;lt;button id="stop"&amp;gt;Stop&amp;lt;/button&amp;gt;
    &amp;lt;div id="console"&amp;gt;&amp;lt;/div&amp;gt;

    &amp;lt;script type="text/javascript"&amp;gt;
     var worker = null;

     $('#start').on('click', function() {
	 // fork a worker process
	 worker = new Worker('basic.js');
	 // callback hander to receive data from worker process
	 worker.onmessage = function (event) {
	     $('#console').text(event.data);
	 };
     });
     $('#stop').on('click', function() {
	 worker.terminate();
     });
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The source code of worker process is below. When it finds a new prime,
it sends with postMessage() to the main process.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var n = 1;
search: while (true) {
    n += 1;
    for (var i = 2; i &amp;lt;= Math.sqrt(n); i += 1)
	if (n % i == 0)
	    continue search;
    // Send a prime to main process !
    postMessage(n);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc92c299" class="outline-3"&gt;
&lt;h3 id="orgc92c299"&gt;Demo&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc92c299"&gt;
&lt;iframe src="https://test.prototype.richka.co/~uchida/study/worker/basic/basic.html" style="width:600px; height: 300px;"&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org6d5b893" class="outline-2"&gt;
&lt;h2 id="org6d5b893"&gt;#2 Sample program the worker process applies image filer&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6d5b893"&gt;
&lt;p&gt;
The 2st sample program is to delegate image filter processing to a
worker process. The main process sends the pixel data of image files
to the worker process. The filter result is sent back to the main
process and it is rendered onto the canvas.
&lt;/p&gt;

&lt;p&gt;
The sequence diagram between main process and web worker is below.
&lt;/p&gt;

&lt;p width="1500px"&gt;
&lt;img src="https://cocktailmake.github.io/images/web-workers-api/demo-image-filter-sequence-large.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
The source code of the main process is below. The main process sends
the pixel data of a selected image to the worker process with
postMessage().
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang="ja"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;

    &amp;lt;!-- JavaScript Start --&amp;gt;
    &amp;lt;script type="text/javascript" src="https://code.jquery.com/jquery-1.9.1.min.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;!-- JavaScript End --&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div id="console"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;p&amp;gt;
      &amp;lt;label&amp;gt;
	Type an image URL to decode
	&amp;lt;input type="url" id="image-url" list="image-list"&amp;gt;
	&amp;lt;datalist id="image-list"&amp;gt;
	  &amp;lt;option value="http://localhost/~uchida/study/lottie-web/samples/output2/images/img_2.png"&amp;gt;
	  &amp;lt;option value="http://localhost/~uchida/study/lottie-web/samples/output2/images/img_0.png"&amp;gt;
	&amp;lt;/datalist&amp;gt;
      &amp;lt;/label&amp;gt;
    &amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;
      &amp;lt;label&amp;gt;
	Choose a filter to apply
	&amp;lt;select id="filter"&amp;gt;
	  &amp;lt;option value="none"&amp;gt;none&amp;lt;/option&amp;gt;
	  &amp;lt;option value="grayscale"&amp;gt;grayscale&amp;lt;/option&amp;gt;
	  &amp;lt;option value="brighten"&amp;gt;brighten by 20%&amp;lt;/option&amp;gt;
	&amp;lt;/select&amp;gt;
      &amp;lt;/label&amp;gt;
    &amp;lt;/p&amp;gt;

    &amp;lt;div id="output"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script type="module"&amp;gt;
     // init a web worker
     const worker = new Worker("worker.js", { type: "module" });
     worker.onmessage = receiveFromWorker;

     const url = document.querySelector("#image-url");
     const filter = document.querySelector("#filter");
     const output = document.querySelector("#output");

     url.oninput = updateImage;
     filter.oninput = sendToWorker;

     let context, imageData;

     function updateImage() {
	 const img = new Image();
	 console.log(url.value);
	 img.src = url.value;
	 img.onload = () =&amp;gt; {
	     output.innerHTML = "";
	     var canvas = document.createElement("canvas");
	     canvas.width = img.width;
	     canvas.height = img.height;

	     context = canvas.getContext("2d");
	     context.drawImage(img, 0, 0);
	     imageData = context.getImageData(0, 0, canvas.width, canvas.height);
	     console.log(imageData);

	     sendToWorker();
	     output.appendChild(canvas);
	 };
     }
     // send the pixel data to worker process
     function sendToWorker() {
	 worker.postMessage({imageData, filter: filter.value });
     }
     // called back by worker process
     function receiveFromWorker(e) {
	 console.log(e);
	 context.putImageData(e.data, 0, 0);
     }
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The source codes of worker process are below.
It receives the pixel data with being called back with onmessage().
When the worker process has applied image filters, it sends back
to main process with sending postMessage().
&lt;/p&gt;

&lt;p&gt;
worker.js whose role is to communicate with the main process.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import * as filters from "./filters.js";

self.onmessage = (e) =&amp;gt; {
    console.log(e.data);
    const { imageData, filter } = e.data;
    filters[filter](imageData);
    self.postMessage(imageData, [imageData.data.buffer]);
};
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
filter.js whose role is to apply image filters.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export function none() {}

export function grayscale({ data: d }) {
  for (let i = 0; i &amp;lt; d.length; i += 4) {
    const [r, g, b] = [d[i], d[i + 1], d[i + 2]];

    // CIE luminance for the RGB
    // The human eye is bad at seeing red and blue, so we de-emphasize them.
    d[i] = d[i + 1] = d[i + 2] = 0.2126 * r + 0.7152 * g + 0.0722 * b;
  }
};

export function brighten({ data: d }) {
  for (let i = 0; i &amp;lt; d.length; ++i) {
    d[i] *= 1.2;
  }
};
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga1425da" class="outline-3"&gt;
&lt;h3 id="orga1425da"&gt;Demo&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga1425da"&gt;
&lt;iframe src="https://test.prototype.richka.co/~uchida/study/worker/module/1.html" style="position: relative; width:100%; height: 800px;"&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>JavaScript</category><guid>https://cocktailmake.github.io/posts/web-workers-api/</guid><pubDate>Sun, 26 Jul 2020 06:00:00 GMT</pubDate></item><item><title>Improvement of Git commands with fzf</title><link>https://cocktailmake.github.io/posts/improvement-of-git-commands-with-fzf/</link><dc:creator>Hitoshi Uchida</dc:creator><description>&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/improvement-of-git-commands-with-fzf/demo-log.png" alt="nil"&gt;
&lt;/p&gt;

&lt;div id="outline-container-org648bcdd" class="outline-2"&gt;
&lt;h2 id="org648bcdd"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org648bcdd"&gt;
&lt;p&gt;
We manage source codes with Git in development projects. In general,
when we check the branches, we use a &lt;b&gt;git branch&lt;/b&gt; command below to
find the candidate and we retrieve the branch with &lt;b&gt;git checkout&lt;/b&gt; in
later step. Or we directly checkout a branch when we know the name
beforehand.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git branch
  bug/RICHIKA-1178
  bug/RICHIKA-2234
  bug/RICHIKA-2510
  feature/RICHIKA-1141
  feature/RICHIKA-1143
  feature/RICHIKA-1155
  feature/RICHIKA-1364
  feature/RICHIKA-1390
  ...
$ git checkout feature/RICHIKA-1155
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This post describes a utility shell script to assist the Git command
operations with fzf command such as &lt;b&gt;git branche&lt;/b&gt;, &lt;b&gt;git checkout&lt;/b&gt; and
&lt;b&gt;git log&lt;/b&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org1926fc4" class="outline-2"&gt;
&lt;h2 id="org1926fc4"&gt;General usage of fzf&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1926fc4"&gt;
&lt;p&gt;
&lt;a href="https://github.com/junegunn/fzf"&gt;fzf&lt;/a&gt; is a powerful Linux command and enables interactive filtering which
can be used for any purpose with receiving stdout of any commands.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/improvement-of-git-commands-with-fzf/fzf.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
The fzf command is packaged in major Linux distributions. For Ubuntu,
it can be installed by apt command.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install fzf
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For examples of the usage of fzf, I interactively find files under a
specified directory with filtering parts of the file path as blow. And
it can show a preview window which we can customize what kind of data
is shown. In this sample, I showed the syntax highlighted content of
the selected file.  This command may be described on another post as
well.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/improvement-of-git-commands-with-fzf/fzf-sample.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org67947b0" class="outline-2"&gt;
&lt;h2 id="org67947b0"&gt;Filtering Git branches by fzf&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org67947b0"&gt;
&lt;p&gt;
There are three commands below.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;| Command     | Feature                              |
|-------------+--------------------------------------|
| git-br-fzf  | Filtering Git branches               |
| git-co-fzf  | Checkout with filtering Git branches |
| git-log-fzf | Filtering Git commit logs            |
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The shell script combining git + fzf to assist Git operations is below.
The dependent command is only fzf.
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;is_in_git_repo&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# git rev-parse HEAD &amp;gt; /dev/null 2&amp;gt;&amp;amp;1&lt;/span&gt;
    git rev-parse HEAD &amp;gt; /dev/null
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# Filter branches.&lt;/span&gt;
git-br-fzf&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    is_in_git_repo &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="nb"&gt;local&lt;/span&gt; tags branches target
    &lt;span class="nv"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;
	git tag &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;'{print "\x1b[31;1mtag\x1b[m\t" $1}'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="nv"&gt;branches&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;
	git branch --all &lt;span class="p"&gt;|&lt;/span&gt; grep -v HEAD &lt;span class="p"&gt;|&lt;/span&gt;
	    sed &lt;span class="s2"&gt;"s/.* //"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s2"&gt;"s#remotes/[^/]*/##"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
	    sort -u &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;'{print "\x1b[34;1mbranch\x1b[m\t" $1}'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="nv"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;
	&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$tags&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$branches&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
	    fzf --no-hscroll --no-multi --delimiter&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"\t"&lt;/span&gt; -n &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
		--ansi --preview&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git log -200 --pretty=format:%s &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;+2..&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;  sed &lt;span class="s1"&gt;'s/$/../'&lt;/span&gt; &lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$target&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk -F &lt;span class="s2"&gt;"\t"&lt;/span&gt; &lt;span class="s1"&gt;'{print $2}'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# Filter branches and checkout the selected one with &amp;lt;enter&amp;gt; key,&lt;/span&gt;
git-co-fzf&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    is_in_git_repo &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
    git checkout &lt;span class="k"&gt;$(&lt;/span&gt;git-br-fzf&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# Filter commit logs. The diff is shown on the preview window.&lt;/span&gt;
git-log-fzf&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;# fshow - git commit browser&lt;/span&gt;
    is_in_git_repo &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="nv"&gt;_gitLogLineToHash&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"echo {} | grep -o '[a-f0-9]\{7\}' | head -1"&lt;/span&gt;
    &lt;span class="nv"&gt;_viewGitLogLine&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$_gitLogLineToHash&lt;/span&gt;&lt;span class="s2"&gt; | xargs -I % sh -c 'git show --color=always %'"&lt;/span&gt;
    git log --graph --color&lt;span class="o"&gt;=&lt;/span&gt;always &lt;span class="se"&gt;\&lt;/span&gt;
	--format&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"%C(auto)%h%d [%an] %s %C(black)%C(bold)%cr"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
    fzf --ansi --no-sort --reverse --tiebreak&lt;span class="o"&gt;=&lt;/span&gt;index --bind&lt;span class="o"&gt;=&lt;/span&gt;ctrl-s:toggle-sort &lt;span class="se"&gt;\&lt;/span&gt;
	--preview&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$_viewGitLogLine&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
	--bind &lt;span class="s2"&gt;"ctrl-m:execute:&lt;/span&gt;
&lt;span class="s2"&gt;		(grep -o '[a-f0-9]\{7\}' | head -1 |&lt;/span&gt;
&lt;span class="s2"&gt;		xargs -I % sh -c 'git show --color=always % | less -R') &amp;lt;&amp;lt; 'FZF-EOF'&lt;/span&gt;
&lt;span class="s2"&gt;		{}&lt;/span&gt;
&lt;span class="s2"&gt;FZF-EOF"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;git-br-fzf&lt;/b&gt; and &lt;b&gt;git-co-fzf&lt;/b&gt; work like this.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/improvement-of-git-commands-with-fzf/demo-branch.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;git-log-fzf&lt;/b&gt; works like this.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/improvement-of-git-commands-with-fzf/demo-log.png" alt="nil"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>fzf</category><category>git</category><guid>https://cocktailmake.github.io/posts/improvement-of-git-commands-with-fzf/</guid><pubDate>Sat, 04 Jul 2020 14:30:00 GMT</pubDate></item><item><title>Batch generation of font preview images with multicore processing</title><link>https://cocktailmake.github.io/posts/batch-generation-of-font-preview-images-with-multicore-processing/</link><dc:creator>Hitoshi Uchida</dc:creator><description>&lt;div id="outline-container-orge07454d" class="outline-2"&gt;
&lt;h2 id="orge07454d"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge07454d"&gt;
&lt;p&gt;
Our video generation service RICHKA enables users to customize
image/video materials and texts, fonts, BGM, color schemes and the
latter video generations are run with the configurations.
&lt;/p&gt;

&lt;p&gt;
In this post, we introduce a background processing of the font
customizing feature, especially auto generation of preview font images
actually rendered by the underlying font engine with font files
installed on the OS with multi-core processing. If the number of the
fonts is few around 10, it is possible to manually create them with
taking screenshots and cropping desired areas and save as image
file. However, our video servers have over 1000 fonts and it is still
increasing and difficult to do by hand. To resolve such cases, a batch
processing helps us, but high speed techniques become also important.
&lt;/p&gt;

&lt;p&gt;
The generated preview images are actually shown on the GUI below and
users can visually select desired fonts used for the video
generation. The whole source code is also introduced and with
utilizing some convenient Linux commands as this script, we can
implement in short time.
&lt;/p&gt;

&lt;p width="1500px"&gt;
&lt;img src="https://cocktailmake.github.io/images/batch-generation-of-font-preview-images-with-multicore-processing/gui-sample.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4512701" class="outline-2"&gt;
&lt;h2 id="org4512701"&gt;Multi-core processing&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4512701"&gt;
&lt;p&gt;
On RICHKA video servers, the number of installed fonts are over 1000
and it takes much time to execute with sequential batch processing to
generate the font preview images. However, we can shorten the heavy
processing with applying multi-core processing to generate them in
parallel because each processing is independent each other and it is
general to have multi-core CPU these days.
&lt;/p&gt;

&lt;p&gt;
The multi-core processing is easy thanks to Python3 builtin package
&lt;b&gt;multiprocessing&lt;/b&gt;. The excerpt of a sample program below is to call
&lt;b&gt;gen_preview_image&lt;/b&gt; with multi-core CPU. When it has prepared 100 data
sets, they are executed in parallel. In this example, the max number
of the used CPU core at a time is 1 less number than the number of
CPU cores. The result values returned from the function
gen_preview_image are accumulated and we can get all of the results as
well.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_multicore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dset&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;multi&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpu_count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# max number of processes&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;starmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fontdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_overwrite&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# init&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outdir&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outdir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;fontfiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fontdir&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"**/*.*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recursive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

    &lt;span class="n"&gt;dset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fontfile&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fontfiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;dset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;fontfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_overwrite&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process_multicore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gen_preview_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	    &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	    &lt;span class="n"&gt;dset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dset&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process_multicore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gen_preview_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;fontDirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'/usr/share/fonts/'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fontDir&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fontDirs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;run_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fontDir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'/home/{getpass.getuser()}/tmp/font_images/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgebf2907" class="outline-2"&gt;
&lt;h2 id="orgebf2907"&gt;Sample program&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgebf2907"&gt;
&lt;p&gt;
The whole source code is below and we use &lt;b&gt;convert&lt;/b&gt; command of
&lt;a href="https://imagemagick.org/index.php"&gt;ImageMagic&lt;/a&gt; to generate font preview images. The images are actually
rendered by a font engine of the OS such as &lt;a href="https://www.freetype.org/"&gt;FreeType&lt;/a&gt;.  The rendered
characters are 'あいうえおアイウエオABCDabcd' in default including
Japanese, but some of fonts don't have the Japanese griph data,
then 'ABCDEFGabcdefg' is rendered as fallback.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;getpass&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shutil&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fontTools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ttLib&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;shortName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Get the short name from the font's names table"""&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\x00&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'utf-16-be'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'surrogateescape'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gen_preview_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fontfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_overwrite&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pointsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'あいうえおアイウエオABCDabcd'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ascii_text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'ABCDEFGabcdefg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fname_prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;ttf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ttLib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TTFont&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fontfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontNumber&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# https://github.com/fonttools/fonttools/issues/541&lt;/span&gt;
	&lt;span class="n"&gt;font_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shortName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ttf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;fname_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fname_prefix&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;font_name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'_'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'.png'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"convert -font '{fontfile}' -pointsize {pointsize} label:{text} '{fname_out}'"&lt;/span&gt;
	&lt;span class="n"&gt;cmd_in&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'surrogateescape'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_overwrite&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname_out&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
		&lt;span class="n"&gt;cmd_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getoutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd_in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CalledProcessError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;grepexc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
		&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"error and try only with ascii:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grepexc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grepexc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'convert -font {fontfile} -pointsize {pointsize} label:{ascii_text} {fname_out}'&lt;/span&gt;
		&lt;span class="n"&gt;cmd_in&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'surrogateescape'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
		    &lt;span class="n"&gt;cmd_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getoutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd_in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CalledProcessError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;grepexc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
		    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"error :"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grepexc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grepexc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		    &lt;span class="n"&gt;fname_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'preview_image_path'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fname_out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;font_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'path_font'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fontfile&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ttLib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TTLibError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'preview_image_path'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'UNKNOWN'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'path_font'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fontfile&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_multicore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dset&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;multi&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpu_count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# max number of processes&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;starmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fontdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_overwrite&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# init&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outdir&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outdir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;fontfiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fontdir&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"**/*.*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recursive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

    &lt;span class="n"&gt;dset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fontfile&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fontfiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;dset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;fontfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_overwrite&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process_multicore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gen_preview_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	    &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	    &lt;span class="n"&gt;dset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dset&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process_multicore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gen_preview_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;fontDirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'/usr/share/fonts/'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fontDir&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fontDirs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;run_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fontDir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'/home/{getpass.getuser()}/tmp/font_images/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb4bcd77" class="outline-2"&gt;
&lt;h2 id="orgb4bcd77"&gt;Sample of generated preview images&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb4bcd77"&gt;
&lt;p&gt;
It took a few minutes to have generated the preview images with over
1000 fonts and the sample ones are below.  The processing speed is
enough and we can utilize the max of the CPU resources.
&lt;/p&gt;

&lt;p width="1500px"&gt;
&lt;img src="https://cocktailmake.github.io/images/batch-generation-of-font-preview-images-with-multicore-processing/sample-result.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge949173" class="outline-2"&gt;
&lt;h2 id="orge949173"&gt;Conclusion&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge949173"&gt;
&lt;p&gt;
We introduced a practical sample program to execute a batch processing
to generate font preview images with over 1000 fonts with utilizing
multi-core CPU. Though we omitted in the sample code, our video
servers stores the generated preview images into S3 and they are
actually shown on RICHKA GUI and it helps users to visually select
desired fonts used for video generation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>GUI</category><category>RICHKA</category><guid>https://cocktailmake.github.io/posts/batch-generation-of-font-preview-images-with-multicore-processing/</guid><pubDate>Sun, 21 Jun 2020 13:22:13 GMT</pubDate></item><item><title>Realtime Display of Video Generation Progress</title><link>https://cocktailmake.github.io/posts/progress-display-of-video-generation/</link><dc:creator>Hitoshi Uchida</dc:creator><description>&lt;div id="outline-container-org2c62cf8" class="outline-2"&gt;
&lt;h2 id="org2c62cf8"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2c62cf8"&gt;
&lt;p&gt;
The video generation in RICHKA is to serialize high quality videos on
video servers with using video templates designed by export
designers. The processing is heavy load and takes several minutes,
therefore RICHKA has a dedicated GUI feature to show the progress
ratio in realtime so that users can check the remained waiting
time. During the processing, video servers monitor the detail
progresses and transmit to web servers to feedback to users on GUI.
&lt;/p&gt;

&lt;p&gt;
RICHKA uses HTTP streaming for the realtime transmitting of the
progress ratio among servers. This feature is to continue send
application data little by little formatted with HTTP chunked
encoding. During sending them, the TCP connection is kept to open. The
HTTP streaming is available on general high-level web server
frameworks as well and we are ready to apply to product services
without taking care the underlying protocol format by
ourselves. However, we need to understand the restriction that the
HTTP connection is per URL. The restriction is simple, but we
sometimes encounter difficulties on practical service products.
&lt;/p&gt;

&lt;p&gt;
In the case of RICHKA, when users click a button to generate videos on
editing pages, it redirects users to top page to see the progress
ration on the video list so that users can edit other videos during
generation videos. Then, the TCP connection between web browsers and
web servers are disconnected in redirecting because of the restriction
and the progress reporting from video servers don't reach to web
browsers. To enable to show the realtime progress after HTTP
redirecting, RICHKA has a dedicated server side processing and this
post explains how RICHKA does. There are several alternatives to
realize this feature, but RICHKA doesn't depend on additional external
services and the internal architecture is also simple and straight
forward. I think this architecture could be applied to general use
cases and I hope this post provides some hints to readers of this
blog.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge0088d2" class="outline-2"&gt;
&lt;h2 id="orge0088d2"&gt;Technical Restriction of HTTP streaming&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge0088d2"&gt;
&lt;p width="1500px"&gt;
&lt;img src="https://cocktailmake.github.io/images/progress-display-of-video-generation/restriction.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
The figure above represents the detail procedure how the progress reporting
with the HTTP streaming is blocked. The bottom is the GUI of RICHKA
and the left side is the editing page to input user data and the right
side is the top page listing up users' videos. The blue arrow
represents the HTTP redirect to navigate users to a top page and it is
triggered when users click the button of video generation on the
editing pages. In the timing, the HTTP streaming response from web
servers are disconnected and the top page can't get the further
progress ratio. The detail procedure in the figure is below.
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;On edit pages, when users click a button to generate videos, it sends a HTTP request with XMLHttpRequest to one of web serves via load balancer. Then the browser is redirect to the top page listing video data.&lt;/li&gt;
&lt;li&gt;The Web server delegates the video generation to one of video servers with sending a HTTP request again. The video server loads a video template and start to generate a video&lt;/li&gt;
&lt;li&gt;During generating, the video server sends the progress ratio with HTTP chunked encoding whose application data is JSON format to the web server.&lt;/li&gt;
&lt;li&gt;The web server transfers the progress ratio received from the video server, but the TCP connection with the web browser has been already disconnected and the data can't reach it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
For a reference, the chunked transfer encoding is like this. In
general, CGI scripts response with using it. Content-Length header is
not used because the expected data size is not known beforehand. A
chunked data starts with the payload size and it ends with a line
break CR LF. In the final chunk, we need to send an empty chunked data
to notify it is last one to the receiver. In RICHKA, the application
data is the progress ratio formatted with JSON.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;HTTP/1.1 200 OK
Content-Type: text/plain
Transfer-Encoding: chunked

5\r\n
Hello\r\n
6\r\n
RICHKA\r\n
0\r\n
\r\n
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org29a8344" class="outline-2"&gt;
&lt;h2 id="org29a8344"&gt;Realtime Display of Video Generation Progress after HTTP Redirect&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org29a8344"&gt;
&lt;p width="1500px"&gt;
&lt;img src="https://cocktailmake.github.io/images/progress-display-of-video-generation/solution.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
To resolve this restriction deriving from the HTTP connection per URL,
RICHKA realizes the realtime feedback of progress ratio with the
architecture above for the specific case of redirecting. The detail procedure is below.
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;ditto with the prior section&lt;/li&gt;
&lt;li&gt;The web server forks a dedicated process to communicate with the video server. It sends a HTTP request and delegates the video generation. In this timing, the TCP connection is disconnected with the web browser because of the redirection.&lt;/li&gt;
&lt;li&gt;The forked process is still alive and it continues to receive the progress ratio from video serves with HTTP chunked encoding.&lt;/li&gt;
&lt;li&gt;Every when the forked process receives the progress ratio, it saves into database as the progress data for the video data.&lt;/li&gt;
&lt;li&gt;After redirecting, the top page periodically sends HTTP GET request to the web server and show the progress data on GUI.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
At the last step, there is alternative method with WebSocket protocol,
but RICHKA doesn't use because general users access from their company
offices and it is general their networks apply HTTP
proxies. Unfortunately, some of HTTP proxies block WebSocket
connection to enhance the web security. Therefore, RICHKA
intentionally applies the traditional method to make more stable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>Infra</category><category>RICHKA</category><guid>https://cocktailmake.github.io/posts/progress-display-of-video-generation/</guid><pubDate>Sat, 16 May 2020 09:07:20 GMT</pubDate></item><item><title>Big picture of RICHKA</title><link>https://cocktailmake.github.io/posts/big-picture-of-richka/</link><dc:creator>Hitoshi Uchida</dc:creator><description>&lt;div id="outline-container-org6b41a16" class="outline-2"&gt;
&lt;h2 id="org6b41a16"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6b41a16"&gt;
&lt;p&gt;
This is the first post from our engineer team.
&lt;/p&gt;

&lt;p&gt;
We periodically share technological topics such as new integrated
features into products and new technologies we are interested in and
prototype implementations to evaluate the feasibility whether they are
worth developing as actual business service.
&lt;/p&gt;

&lt;p&gt;
In this post, we introduce a web application RICHKA which enables
users to easily create high quality videos on web browsers,
especially, the development environment and the server infra
structures and the processing sequence of the primary function to
generate high quality videos with using image/videos users upload. The
architecture and internal processing are generally complicated than
general services such as EC and blog and chat system because the size
of video files are huge and we need to carefully take care the load of
servers such as delegating heavy processing to other dedicated video
servers and applying delaying processing to postpone heavy processing
later. And the load of file storage is also high and we need to take
care the timing to load files from network storage. On GUI, we don't
initially load video contents because it increases the load of web
servers and delay the response and influences to UX. Instead, we load
thumbnails of any videos on GUI and load video contents only when they
are played on video player.
&lt;/p&gt;

&lt;p&gt;
RICHKA has some dedicated video engines to generate high quality
videos with using well designed video templates created by expert
designers. To make the representation of videos richer, video servers
enable to change not only input texts and image/video material files
users upload, but also font family and color scheme and BGM in
realtime during generating videos. The load of video generation
processing is very heavy and we apply lots of optimization to reduce
the generation time with keeping the high quality. Therefore video
services demand higher development skills of web applications.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org65f2623" class="outline-2"&gt;
&lt;h2 id="org65f2623"&gt;RICHKA Development Environment&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org65f2623"&gt;
&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/big-picture-of-richka/technologies-building-richka.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
The engineer team is basically remote and more than 90% live in
foreign countries. We hire only high skill experts who have strong
skills of web technologies and web application development. We will
describe our team more on another post later.
&lt;/p&gt;

&lt;p&gt;
We always apply new emerged technologies into products to enhance the
features and reduce development cost. It is free for our engineers to
propose them to see the feasibility and the side effect. The speed of
try and error is faster than general teams because our team is
completely flat and every member has the privilege to propose new
ideas among members. If clear and reasonable purposes are explained to
the team, they are basically accepted.
&lt;/p&gt;

&lt;p&gt;
Regarding server side, it is based on Python and Django and we use
additional 42 Python packages such as Django extensions and
image/video manipulation and statistics and crypt. The current total
lines of Django is around 12200.
&lt;/p&gt;

&lt;p&gt;
Regarding front end, we use abut 20 OSS libraries to build the
functional GUI such as jQuery, cropper.js, smartcrop.js, Vue, Bootstrap
and so on. The current total lines of JavaScript codes we developed is
around 13000.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3d39103" class="outline-4"&gt;
&lt;h4 id="org3d39103"&gt;OS&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org3d39103"&gt;
&lt;p&gt;
Ubuntu Server
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org660957a" class="outline-4"&gt;
&lt;h4 id="org660957a"&gt;Programming Language&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org660957a"&gt;
&lt;p&gt;
Python, JavaScript, HTML5, CSS3, JSX, Bash
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8879a54" class="outline-4"&gt;
&lt;h4 id="org8879a54"&gt;Server Side Technologies&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org8879a54"&gt;
&lt;p&gt;
Django, MySQL, HTTP2, Web API, video generation engine, image processing,
multi core processing, load distribution
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5ac2f63" class="outline-4"&gt;
&lt;h4 id="org5ac2f63"&gt;Front End&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org5ac2f63"&gt;
&lt;p&gt;
jQuery, jQuery UI, Vue.js, video.js, cropper.js, smartcrop.js, Bootstrap and much more
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7232afa" class="outline-4"&gt;
&lt;h4 id="org7232afa"&gt;Regression Test&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org7232afa"&gt;
&lt;p&gt;
Jenkins, Django UnitTest, Selenium
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orga2f136f" class="outline-2"&gt;
&lt;h2 id="orga2f136f"&gt;Sequence of video generation&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga2f136f"&gt;
&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/big-picture-of-richka/video-generation-sequence.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
RICHKA is behind a load balancer to distribute lots of coming HTTP
requests to multiple web servers. And to enable simultaneous video
generation at a time, the video generation requests are also
distributed to multiple video servers. The user data such as
images/videos users upload and video template files used by video
engine are stored on an external network storage. They are retrieved
from both web servers and video servers.
&lt;/p&gt;

&lt;p&gt;
The summary sequence of video generation is,
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Users click a button to generate videos and the requests reach one of web servers via the load balancer.&lt;/li&gt;
&lt;li&gt;The web server retrieves the user data such as selected video template and font families and color scheme and BGM and make HTTP requests and send to one of video servers.&lt;/li&gt;
&lt;li&gt;The web server receives the generation progress in realtime and store into the database to show the progress on GUI.&lt;/li&gt;
&lt;li&gt;When the generations have been done, the web server downloads the generated videos and store into the file storage.&lt;/li&gt;
&lt;li&gt;The web server sends the generated videos to web browsers and video player loads them and users can see on GUI.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>Infra</category><category>RICHKA</category><guid>https://cocktailmake.github.io/posts/big-picture-of-richka/</guid><pubDate>Tue, 05 May 2020 08:02:40 GMT</pubDate></item></channel></rss>