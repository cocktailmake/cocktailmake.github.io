<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RICHKA Developer Blog</title><link>https://cocktailmake.github.io/</link><description>Transmit technology information from developers.</description><atom:link href="https://cocktailmake.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2021 &lt;a href="mailto:"&gt;RICHKA&lt;/a&gt; </copyright><lastBuildDate>Wed, 20 Jan 2021 07:13:05 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Page Speed Improvement of Videos on RICHKA</title><link>https://cocktailmake.github.io/posts/page-speed-improvement-of-videos-on-richka-gui/</link><dc:creator>Le Thanh Tung</dc:creator><description>&lt;p&gt;
Like other video systems, RICHKA GUI also suffered from the slow loading of the pages because there are many images and videos.
&lt;/p&gt;

&lt;p&gt;
In this post, we share the past effort that we made the page speed of video list and format list on top and edit page faster with integrating a delayed loading of video contents.
&lt;/p&gt;

&lt;p&gt;
First, we introduce about videos in RICHKA GUI. There are 2 main pages:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;TOP page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;show generated videos. (1)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/page-speed-improvement-of-videos-on-richka-gui/index.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;show template videos for selecting when creating a new video data. (2)&lt;/li&gt;
&lt;/ul&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/page-speed-improvement-of-videos-on-richka-gui/add_template.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;EDIT page:
&lt;ul class="org-ul"&gt;
&lt;li&gt;show videos and images in scenes for generating video. (3)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/page-speed-improvement-of-videos-on-richka-gui/scene.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;show videos and images in library of video data, library of user, searching from videos and images side, capturing from other website, PDF file (4)&lt;/li&gt;
&lt;/ul&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/page-speed-improvement-of-videos-on-richka-gui/material.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;show template videos for selecting another template as same as creating a new video data in TOP page (5)&lt;/li&gt;
&lt;/ul&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/page-speed-improvement-of-videos-on-richka-gui/change_template.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;show generated video (6)&lt;/li&gt;
&lt;/ul&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/page-speed-improvement-of-videos-on-richka-gui/generate_video.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;show sample video (7)&lt;/li&gt;
&lt;/ul&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/page-speed-improvement-of-videos-on-richka-gui/sample_video.png" alt="nil"&gt;
&lt;/p&gt;

&lt;div id="outline-container-org3c80e8f" class="outline-2"&gt;
&lt;h2 id="org3c80e8f"&gt;Performance Improvements&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3c80e8f"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org83c958f" class="outline-3"&gt;
&lt;h3 id="org83c958f"&gt;Pagination and Search&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org83c958f"&gt;
&lt;p&gt;
Number of videos and images are large and displaying all of them is too slow. Therefore, we limited the number of videos and images to be shown at a time.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2a696e9" class="outline-3"&gt;
&lt;h3 id="org2a696e9"&gt;Load the video only after loading the page&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2a696e9"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Except for videos and images in scenes (3), we didn't get video in loading page processing.&lt;/li&gt;
&lt;li&gt;In almost of cases, we will call an Ajax for loading them.&lt;/li&gt;
&lt;li&gt;The flow is:
&lt;ul class="org-ul"&gt;
&lt;li&gt;After loading a page or loading popup, an Ajax will be called.&lt;/li&gt;
&lt;li&gt;In the request processing, a loading page or loading icon will be displayed.&lt;/li&gt;
&lt;li&gt;After response is returned, hide the loading page or loading icon, then show videos and images.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/page-speed-improvement-of-videos-on-richka-gui/lazyload_bf2.gif" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org80583f0" class="outline-3"&gt;
&lt;h3 id="org80583f0"&gt;Loading a limited number of videos one by one&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org80583f0"&gt;
&lt;p&gt;
In above improvement, in case of videos, we don't show all of them in the same time.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;function loadGroupVideojs(videoItems, modal_id, after_video_loading) {
    loadVideojs(videoItems, 0, modal_id, after_video_loading);
    setTimeout(loadVideojs(videoItems, 1, modal_id, after_video_loading), 50);
    setTimeout(loadVideojs(videoItems, 2, modal_id, after_video_loading), 100);
    setTimeout(loadVideojs(videoItems, 3, modal_id, after_video_loading), 150);
    setTimeout(loadVideojs(videoItems, 4, modal_id, after_video_loading), 200);
}
function loadVideojs(videoItems, index, modal_id, after_video_loading){
    var video = videoItems[index];
    ...
	var poster = video.getAttribute('xx-poster');
	if (poster === null) {
	    if (video.getAttribute('preload') === 'none') {
		video.setAttribute('preload', 'metadata');
		addDurationTimeToVideo(video);
	    }
	}
    ...
    index += 5;
    if (index &amp;lt; videoItems.length) {

	setTimeout(loadVideojs(videoItems, index, modal_id, after_video_loading), 400);
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Like above code, we loaded five videos &lt;code&gt;50ms&lt;/code&gt; apart. When the videos have been loaded, the next videos are loaded in the end of function &lt;code&gt;loadVideojs&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
When all of the videos have been loaded, the recursive function call of &lt;code&gt;loadVideojs&lt;/code&gt; ends.
&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/page-speed-improvement-of-videos-on-richka-gui/lazyload_af.gif" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf7e1b1b" class="outline-3"&gt;
&lt;h3 id="orgf7e1b1b"&gt;Use &lt;code&gt;preload&lt;/code&gt; and &lt;code&gt;thumbnail&lt;/code&gt; attributes in video tags&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf7e1b1b"&gt;
&lt;p&gt;
All videos in RICHKA have thumbnail images.
There are 2 types of videos:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Normal video: only play
&lt;ul class="org-ul"&gt;
&lt;li&gt;In this case, video tags will be rendered with 2 attributes: &lt;code&gt;preload&lt;/code&gt; attribute is none and &lt;code&gt;xx-poster&lt;/code&gt; attribute is a thumbnail&lt;/li&gt;
&lt;li&gt;When videos are visible, the poster attribute will be created with &lt;code&gt;xx-poster&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;When videos are played, the video contents will be loaded&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Special video: need video information such as height, width, duration time
&lt;ul class="org-ul"&gt;
&lt;li&gt;We read video information and save to the video name into database&lt;/li&gt;
&lt;li&gt;When videos are rendered, we use thumbnails and use video information to crop&lt;/li&gt;
&lt;li&gt;When users hover over videos, thumbnails are removed and video tags whose &lt;code&gt;preload&lt;/code&gt; attribute is &lt;code&gt;metadata&lt;/code&gt; are added with a style of thumbnail.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/page-speed-improvement-of-videos-on-richka-gui/hoverload.gif" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>GUI</category><guid>https://cocktailmake.github.io/posts/page-speed-improvement-of-videos-on-richka-gui/</guid><pubDate>Wed, 20 Jan 2021 07:00:00 GMT</pubDate></item><item><title>FFmpeg WASM</title><link>https://cocktailmake.github.io/posts/ffmpeg-wasm/</link><dc:creator>Duc To</dc:creator><description>&lt;div id="outline-container-org3632b1d" class="outline-2"&gt;
&lt;h2 id="org3632b1d"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3632b1d"&gt;
&lt;p&gt;
&lt;b&gt;FFmpeg WASM&lt;/b&gt; is a pure WebAssembly / JavaScript port of FFmpeg. It enables video &amp;amp; audio record, convert and stream right inside browsers.
The main Git repository for it is &lt;a href="https://github.com/ffmpegwasm/ffmpeg.wasm"&gt;https://github.com/ffmpegwasm/ffmpeg.wasm&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/ffmpeg-wasm/ffmpeg_wasm.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Right now, in Recording process, we utilize user experience by uploading video source file directly from front-end web browser to S3 without going through any server using presigned S3 URL. The limitation of the approach is that we cannot convert the source video file as needed without going through the server (which increases a lot of waiting time for end users). Some handy cases for that needs are:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Unify video source format to MP4 from different video file formats (AVI, MOV).&lt;/li&gt;
&lt;li&gt;Right now web browser does not support H265 video format and we need to convert to MP4 format to support playing it in web browser.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Based on the above needs, we research &lt;b&gt;FFmpeg WASM&lt;/b&gt; library as we think that it would be nice if we can do the video conversion directly from web browser
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgecd3836" class="outline-2"&gt;
&lt;h2 id="orgecd3836"&gt;Licensing&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgecd3836"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;@ffmpeg/ffmpeg&lt;/code&gt; contains kind of a wrapper to handle the complexity of loading core and calling low-level APIs. It is a small code base and under MIT license.&lt;/li&gt;

&lt;li&gt;&lt;code&gt;@ffmpeg/core&lt;/code&gt; following the same licenses as FFmpeg and its external libraries.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org88d916c" class="outline-2"&gt;
&lt;h2 id="org88d916c"&gt;How it works&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org88d916c"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The only JavaScript file defined in HTML file is &lt;a href="https://unpkg.com/@ffmpeg/ffmpeg@0.9.4/dist/ffmpeg.min.js"&gt;https://unpkg.com/@ffmpeg/ffmpeg@0.9.4/dist/ffmpeg.min.js&lt;/a&gt; but actually it is just a wrapper.&lt;/li&gt;
&lt;li&gt;Based on the actual need in our triggered ffmpeg function, the JavaScript will load ffmpeg/core file &lt;code&gt;*ffmpeg-core.wasm&lt;/code&gt; and its JavaScript file &lt;code&gt;*ffmpeg-core.js&lt;/code&gt;. The size of &lt;code&gt;ffmpeg-core.wasm&lt;/code&gt; at the time of testing is 22MB.&lt;/li&gt;
&lt;li&gt;Sometimes we may need to use the newest version of &lt;code&gt;@ffmpeg/core&lt;/code&gt; and we can define it using customized path.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ffmpeg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createFFmpeg&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;corePath&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'../../../src/ffmpeg-core.js'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;We can re-compile ffmpeg-core by checking &lt;b&gt;build.sh&lt;/b&gt; inside &lt;a href="https://github.com/ffmpegwasm/ffmpeg.wasm-core"&gt;https://github.com/ffmpegwasm/ffmpeg.wasm-core&lt;/a&gt; repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge4ea929" class="outline-2"&gt;
&lt;h2 id="orge4ea929"&gt;Testing example&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge4ea929"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;In the demo below, user will have an upload button to upload source video file, which can be in either webm, MOV or H.265 MP4 format.&lt;/li&gt;
&lt;li&gt;It takes several minutes to transcode and you can monitor the progress on the console of DevTool.&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src="https://test.prototype.richka.co/~duc/wasm/" style="width:100%; height: 400px;"&gt;&lt;/iframe&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;The source of the sample demo is below.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;body&amp;gt;
  &amp;lt;video id="player" controls&amp;gt;&amp;lt;/video&amp;gt;
  &amp;lt;input type="file" id="uploader"&amp;gt;
  &amp;lt;script src="https://unpkg.com/@ffmpeg/ffmpeg@0.9.4/dist/ffmpeg.min.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script&amp;gt;
    const { createFFmpeg, fetchFile } = FFmpeg;
    const ffmpeg = createFFmpeg({ log: true });
    const transcode = async ({ target: { files } }) =&amp;gt; {
      const { name } = files[0];
      await ffmpeg.load();
      ffmpeg.FS('writeFile', name, await fetchFile(files[0]));
      await ffmpeg.run('-i', name,  'output.mp4');
      //await ffmpeg.run('-i', name, '-q:v', 0, 'output.mp4');
      const data = ffmpeg.FS('readFile', 'output.mp4');
      const video = document.getElementById('player');
      video.src = URL.createObjectURL(new Blob([data.buffer], { type: 'video/mp4' }));
    }

    document.getElementById('uploader').addEventListener('change', transcode);
  &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;When user click upload button and select a MOV video file, &lt;b&gt;FFmpeg WASM&lt;/b&gt; library will be called to converted it to MP4 file (output.mp4).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/ffmpeg-wasm/wasm_upload.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;User can trace the conversion status, as normal ffmpeg oss by its output in console log&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/ffmpeg-wasm/console_log1.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/ffmpeg-wasm/console_log2.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/ffmpeg-wasm/console_log3.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;When the conversion is completed, JS loads HTML video tag's source with the converted video's data and display on screen.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/ffmpeg-wasm/conversion_output.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;User flow diagram can be described as below&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/ffmpeg-wasm/wasm_figure1.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5726503" class="outline-2"&gt;
&lt;h2 id="org5726503"&gt;Testing result&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5726503"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;We made 4 test cases converting from different source video format to MP4 format:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;WebM&lt;/b&gt;: It is successful and the conversion time is fast. For around 8MB video it took less than 2 minutes.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;H.265&lt;/b&gt;: It is successful but the progress takes very long to complete, more than 6 minutes while if we do it with ffmpeg command it is just around 3 minutes. So nearly double the time.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;General MOV file from Internet&lt;/b&gt;: It is successful and the conversion time is quite fast, around 2 minutes.&lt;/li&gt;
&lt;li&gt;MOV file which recorded from MacOS: It is failed after few seconds using &lt;b&gt;FFmpeg WASM&lt;/b&gt; library but it is successful using ffmpeg command.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;General MOV file from Internet&lt;/b&gt;: It is successful and the conversion time is quite fast, around 2 minutes.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
At the moment of writing this article, &lt;b&gt;FFmpeg WASM&lt;/b&gt; is twice slower and unstable, but it is worth monitoring the future progress, and we may use WASM of ImageMagic in the future.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>JavaScript</category><category>wasm</category><guid>https://cocktailmake.github.io/posts/ffmpeg-wasm/</guid><pubDate>Wed, 06 Jan 2021 05:00:00 GMT</pubDate></item><item><title>Integration Metadata into Video</title><link>https://cocktailmake.github.io/posts/integration-metadata-into-video/</link><dc:creator>Hitoshi Uchida</dc:creator><description>&lt;div id="outline-container-orgbe65c3c" class="outline-2"&gt;
&lt;h2 id="orgbe65c3c"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbe65c3c"&gt;
&lt;p&gt;
Almost of the video data consists of the binary data of video and
audio streams, but the video format such as AVI(.avi), MPEG-4(.mp4)
and QuickTime File Format(.mov) etc. support to embed key/value pairs
of &lt;b&gt;metadata&lt;/b&gt; into video binary because the formats have the dedicated area
to embed.
&lt;/p&gt;

&lt;p&gt;
The benefit to embed the metadata is to keep the application data in
portable without having an external file. Even if we distribute the
video file on the web, the metadata will not be lost and keep in
stable.  The metadata is officially standardized and general video
player can understand them and no harm in the playback.
&lt;/p&gt;

&lt;p&gt;
In RICHKA, we integrate some metadata into the generated videos to be
available in our future applications.  For examples, we integrate an
id of video template used in the video generation to enable to locate
even if the videos are distributed.
&lt;/p&gt;

&lt;p&gt;
The keys supported by each container format are described below.
Based on the format, the keys are different, but we can easily integrate with &lt;code&gt;ffmpeg&lt;/code&gt;.
&lt;a href="https://wiki.multimedia.cx/index.php/FFmpeg_Metadata"&gt;https://wiki.multimedia.cx/index.php/FFmpeg_Metadata&lt;/a&gt;
&lt;/p&gt;


&lt;p width="500px"&gt;
[[&lt;img src="https://cocktailmake.github.io/images/integration-metadata-into-video/Selection_015_2021-01-05_23-56-21.png" alt="nil"&gt;]
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6407d98" class="outline-2"&gt;
&lt;h2 id="org6407d98"&gt;Integrating metadata into Video&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6407d98"&gt;
&lt;p&gt;
The sample below is to embed metadata with &lt;code&gt;ffmpeg&lt;/code&gt; such as the name of the encoding tool,
the video title and the id of video format used.
We can suppress the needless transcode by simply copying video/audio streams with
the options &lt;code&gt;-c:a copy -c:v copy&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ffmpeg -y -i test.mp4 \
  -metadata encoding_tool='RICHKA' \
  -metadata description='{"format_id":"00123"}' \
  -metadata title="Sample Title" \
  -c:a copy -c:v copy out.mp4
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc0408a8" class="outline-2"&gt;
&lt;h2 id="orgc0408a8"&gt;Retrieving metadata from video&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc0408a8"&gt;
&lt;p&gt;
There are some Linux commands to retrieve the metadata.
&lt;/p&gt;

&lt;p&gt;
The 1st option is &lt;code&gt;ffprobe&lt;/code&gt; which is automatically installed with &lt;code&gt;ffmpeg&lt;/code&gt;.
In the output log, there is a section &lt;code&gt;Metadada&lt;/code&gt; including the key/value pairs.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ffprobe out.mp4

...
  Metadata:
    major_brand     : isom
    minor_version   : 512
    compatible_brands: isomiso2avc1mp41
    title           : Sample Title
    encoder         : RICHKA
    description     : {"format_id":"00123"}
...
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
2nd option is to use &lt;code&gt;AtomicParsley&lt;/code&gt; with a command option &lt;code&gt;-t&lt;/code&gt;.
It simply show the raw data of the key/value pairs.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ AtomicParsley out.mp4 -t
Atom "Â©nam" contains: Sample Title
Atom "Â©too" contains: RICHKA
Atom "desc" contains: {"format_id":"00123"}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This is not recommended to use in general,
but 3rd option is to use the powerful &lt;code&gt;strings&lt;/code&gt; to print the sequences of printable characters in any files.
The metadata was integrated into the final area in the video binary.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat strings out.mp4
...
data
Sample Title
data
RICHKA
-desc
%data
{"format_id":"00123"}
...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>ffmpeg</category><guid>https://cocktailmake.github.io/posts/integration-metadata-into-video/</guid><pubDate>Tue, 05 Jan 2021 14:23:03 GMT</pubDate></item><item><title>License check by scancode-toolkit</title><link>https://cocktailmake.github.io/posts/license-check-by-scancode-toolkit/</link><dc:creator>Bui Dinh Cuong</dc:creator><description>&lt;div id="outline-container-orgbc006f8" class="outline-2"&gt;
&lt;h2 id="orgbc006f8"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbc006f8"&gt;
&lt;p&gt;
In this post, we introduce a method of automating the process of Python codes license scanning by using:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;Scancode-toolkit&lt;/code&gt;: To perform code license scanning.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jenkins&lt;/code&gt;: Run this test automatically based on changes of code on target branch.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org58b0a6c" class="outline-2"&gt;
&lt;h2 id="org58b0a6c"&gt;Steps&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org58b0a6c"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0e11ace" class="outline-3"&gt;
&lt;h3 id="org0e11ace"&gt;Prepare environment&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0e11ace"&gt;
&lt;p&gt;
Before we start, make sure the system satisfy below mentioned requirements:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Python3.6 installed&lt;/li&gt;
&lt;li&gt;Git &amp;amp; pip configured&lt;/li&gt;
&lt;li&gt;Jenkins servers installed &amp;amp; configured&lt;/li&gt;
&lt;li&gt;Identify git branch for code scanning&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;Scancode-toolkit&lt;/code&gt; tool (See guide from &lt;a href="https://scancode-toolkit.readthedocs.io/en/latest/getting-started/newcomer.html#installing-scancode"&gt;https://scancode-toolkit.readthedocs.io/en/latest/getting-started/newcomer.html#installing-scancode&lt;/a&gt;). Because our project is using Python3.8 which has not been supported by Scancode-toolkit (&lt;a href="https://scancode-toolkit.readthedocs.io/en/latest/getting-started/install.html"&gt;https://scancode-toolkit.readthedocs.io/en/latest/getting-started/install.html&lt;/a&gt;) so we have to use Miniconda (&lt;a href="https://docs.conda.io/en/latest/miniconda.html"&gt;https://docs.conda.io/en/latest/miniconda.html&lt;/a&gt;) to create Python3.6 environment, build binary version and use it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6b914dc" class="outline-3"&gt;
&lt;h3 id="org6b914dc"&gt;Create Jenkins job&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6b914dc"&gt;
&lt;p&gt;
From home page of Jenkins:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Click "New Item"&lt;/li&gt;
&lt;li&gt;Enter a name of the new job, for example: "Check-License-Scan-Code"&lt;/li&gt;
&lt;li&gt;Choose "Freestyle project" then click "OK" to go to next steps&lt;/li&gt;
&lt;/ul&gt;


&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/license-check-by-scancode-toolkit/step-1.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1e571d9" class="outline-3"&gt;
&lt;h3 id="org1e571d9"&gt;Configure Jenkins job&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1e571d9"&gt;
&lt;p&gt;
After clicking "OK" button in the previous step, we will see a GUI that contains steps to configure Jenkins job. We will go over step by step.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;In "General" step, we should add a description for this Jenkins job and configure log rotation to prevent too many logs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/license-check-by-scancode-toolkit/step-2.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;In "Source Code Management" step, you have to do following actions:

&lt;ul class="org-ul"&gt;
&lt;li&gt;Enter your repository (From GitHub, GitLab, Bitbucket, Backlog, .etc)&lt;/li&gt;
&lt;li&gt;Add credentials that can pull codes from a remote branch and select it.&lt;/li&gt;
&lt;li&gt;Provide a branch that you want to check (In this example, I want to scan stage branch).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Besides, there are many other additional behaviors that you can add more. For example, your project has submodules and need to scan them as well, you can add "Advanced sub-modules behaviors" and do configure. Our project has sub-modules so I added this behavior and do recursively.
&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/license-check-by-scancode-toolkit/step-3.png" alt="nil"&gt;
&lt;/p&gt;


&lt;ul class="org-ul"&gt;
&lt;li&gt;In "Build Triggers" step, there are many options that you can run this job but I will choose "Poll SCM". This will allow me to configure to run this job like a crontab in Linux system. For example, I will run this job once an hour (Using Poll SCM then the job will run if there is a new change of code only). In "Build Environment" step, you can choose some options for building like "Delete workspace before build starts", Add timestamps to the Console Output", .etc. It's up to you. My suggestion is that you should add "Add timestamps to the Console Output" then you can know the build time when checking the output log again.&lt;/li&gt;
&lt;/ul&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/license-check-by-scancode-toolkit/step-4.png" alt="nil"&gt;
&lt;/p&gt;


&lt;ul class="org-ul"&gt;
&lt;li&gt;"Build" step: Because I installed bandit on Jenkins server, so I will choose "Execute shell" for this step. I will use bandit to scan all source folder from git repository and try to find if there is any "High Severity" item. If there is any item, I will use "exit 1" to mark that this build is failed. Otherwise, the build is success. Then we can use "Post-build Actions" to define response actions with each type of status.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Here is content of script that I will run:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;target_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;./source
&lt;span class="nv"&gt;result_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;license-check-result
mkdir -p &lt;span class="nv"&gt;$result_dir&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/lib64
/home/jenkins/toolkits/scancode-toolkit-3.1.1/scancode --license --copyright --summary-with-details --processes &lt;span class="m"&gt;2&lt;/span&gt; --json-pp &lt;span class="nv"&gt;$result_dir&lt;/span&gt;/result.json --html &lt;span class="nv"&gt;$result_dir&lt;/span&gt;/result.html &lt;span class="nv"&gt;$target_dir&lt;/span&gt;
&lt;span class="nv"&gt;parsed_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$result_dir&lt;/span&gt;&lt;span class="s2"&gt;/result1.json"&lt;/span&gt;
&lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;cat &lt;span class="nv"&gt;$result_dir&lt;/span&gt;/result.json&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$JSON&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tr &lt;span class="s1"&gt;'\r\n'&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;'.files[].licenses[].matched_rule.licenses | join(",")'&lt;/span&gt; &amp;gt; &lt;span class="nv"&gt;$parsed_file&lt;/span&gt;

&lt;span class="nv"&gt;gpl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"gpl"&lt;/span&gt;
&lt;span class="nv"&gt;invalid_license_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; line
&lt;span class="k"&gt;do&lt;/span&gt;
	&lt;span class="nv"&gt;licenses&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$line&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s2"&gt;"s/\"//g"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tr &lt;span class="s2"&gt;","&lt;/span&gt; &lt;span class="s2"&gt;"\n"&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
	&lt;span class="nv"&gt;sub_license_valid_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
	&lt;span class="k"&gt;for&lt;/span&gt; license in &lt;span class="nv"&gt;$licenses&lt;/span&gt;
	&lt;span class="k"&gt;do&lt;/span&gt;
	    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$license&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt;  *&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$gpl&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;* &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
		&lt;span class="nv"&gt;sub_license_valid_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;sub_license_valid_count+1&lt;span class="k"&gt;))&lt;/span&gt;
		&lt;span class="nb"&gt;break&lt;/span&gt;
	    &lt;span class="k"&gt;fi&lt;/span&gt;
	&lt;span class="k"&gt;done&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$sub_license_valid_count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
		&lt;span class="nv"&gt;invalid_license_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;invalid_license_count+1&lt;span class="k"&gt;))&lt;/span&gt;
	&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt; &amp;lt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$parsed_file&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$invalid_license_count&lt;/span&gt; -gt &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/license-check-by-scancode-toolkit/step-5.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
"Post-build Actions" will support us to define actions that we want to do when the build is failed. There are many actions that we can choose. Following my opinion, I mostly use "E-mail Notification" then I will know when this job is failed to check and make it works as it should be.
All's done! Now you can click "Save" and then click "Build Now" to build this job. If it's failed, you can go to the failed build and check "Console Output" to find out the reason and fix this. Otherwise, you can sleep well because there is no high severity issues on your code.
&lt;/p&gt;

&lt;p&gt;
Here is an example of an output that you can see on "Console Output" on a build item (You can see it when the job is running, it will be loaded in real-time).
&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/license-check-by-scancode-toolkit/step-6.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Thanks for your reading to the end of this post!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>license</category><guid>https://cocktailmake.github.io/posts/license-check-by-scancode-toolkit/</guid><pubDate>Mon, 04 Jan 2021 00:30:52 GMT</pubDate></item><item><title>Find Security Issues With Bandit</title><link>https://cocktailmake.github.io/posts/find-security-issues-with-bandit/</link><dc:creator>Bui Dinh Cuong</dc:creator><description>&lt;figure&gt;&lt;img src="https://cocktailmake.github.io/images/find-security-issues-with-bandit/jenkins+bandit.png"&gt;&lt;/figure&gt; &lt;div id="outline-container-org5d81642" class="outline-2"&gt;
&lt;h2 id="org5d81642"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5d81642"&gt;
&lt;p&gt;
In this post, we introduce a method of automating the process of code review of Python codes by using:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;Bandit&lt;/code&gt;: To perform code review &amp;amp; find security issues of Python codes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jenkins&lt;/code&gt;: Run this test automatically based on changes of code on target branch.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc76cbd3" class="outline-2"&gt;
&lt;h2 id="orgc76cbd3"&gt;Steps&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc76cbd3"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org6c88c67" class="outline-3"&gt;
&lt;h3 id="org6c88c67"&gt;Prepare environment&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6c88c67"&gt;
&lt;p&gt;
Before we start, make sure the system satisfy below mentioned requirements:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Python2.7/Python3 installed&lt;/li&gt;
&lt;li&gt;Git &amp;amp; pip configured&lt;/li&gt;
&lt;li&gt;Jenkins servers installed &amp;amp; configured&lt;/li&gt;
&lt;li&gt;Identify git branch for code scanning&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;bandit&lt;/code&gt; tool (See guide from &lt;a href="https://github.com/PyCQA/bandit"&gt;https://github.com/PyCQA/bandit&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6ff57b9" class="outline-3"&gt;
&lt;h3 id="org6ff57b9"&gt;Create Jenkins job&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6ff57b9"&gt;
&lt;p&gt;
From home page of Jenkins:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Click "New Item"&lt;/li&gt;
&lt;li&gt;Enter a name of the new job, for example: "Security-Issues-Scanner"&lt;/li&gt;
&lt;li&gt;Choose "Freestyle project" then click "OK" to go to next steps&lt;/li&gt;
&lt;/ul&gt;


&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/find-security-issues-with-bandit/create-new-jenkins-item.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2a32c7a" class="outline-3"&gt;
&lt;h3 id="org2a32c7a"&gt;Configure Jenkins job&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2a32c7a"&gt;
&lt;p&gt;
After clicking "OK" button in the previous step, we will see a GUI that contains steps to configure Jenkins job. We will go over step by step.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;In "General" step, we should add a description for this Jenkins job and configure log rotation to prevent too many logs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/find-security-issues-with-bandit/general-information.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;In "Source Code Management" step, you have to do following actions:

&lt;ul class="org-ul"&gt;
&lt;li&gt;Enter your repository (From GitHub, GitLab, Bitbucket, Backlog, .etc)&lt;/li&gt;
&lt;li&gt;Add credentials that can pull codes from a remote branch and select it.&lt;/li&gt;
&lt;li&gt;Provide a branch that you want to check (In this example, I want to scan stage branch).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/find-security-issues-with-bandit/source-code-management.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
There are many other additional behaviors that you can add more. For example, your project has submodules and need to scan them as well, you can add "Advanced sub-modules behaviors" and do configure.
Here is list most behaviors that you can add:
&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/find-security-issues-with-bandit/source-code-additional-behaviors.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;In "Build Triggers" step, there are many options that you can run this job but I will choose "Poll SCM". This will allow me to configure to run this job like a crontab in Linux system. For example, I will run this job once an hour (Using Poll SCM then the job will run if there is a new change of code only).&lt;/li&gt;
&lt;/ul&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/find-security-issues-with-bandit/build-trigger-poll-scm.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;In "Build Environment" step, you can choose some options for building like "Delete workspace before build starts", Add timestamps to the Console Output", .etc. It's up to you. My suggestion is that you should add "Add timestamps to the Console Output" then you can know the build time when checking the output log again.&lt;/li&gt;

&lt;li&gt;"Build" step: Because I installed bandit on Jenkins server, so I will choose "Execute shell" for this step. I will use bandit to scan all source folder from git repository and try to find if there is any "High Severity" item. If there is any item, I will use "exit 1" to mark that this build is failed. Otherwise, the build is success. Then we can use "Post-build Actions" to define response actions with each type of status.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Here is content of script that I will run:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bandit -r ./source &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tee ./out.log
&lt;span class="nv"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;grep &lt;span class="s2"&gt;"Severity: High"&lt;/span&gt; ./out.log &lt;span class="p"&gt;|&lt;/span&gt; wc -l&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$num&lt;/span&gt; -eq &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/find-security-issues-with-bandit/build-script.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;"Post-build Actions" will support us to define actions that we want to do when the build is failed. There are many actions that we can choose:&lt;/li&gt;
&lt;/ul&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/find-security-issues-with-bandit/post-build-actions.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
With my opinion, I mostly use "E-mail Notification" then I will know when this job is failed to check and make it works as it should be.
All's done! Now you can click "Save" and then click "Build Now" to build this job. If it's failed, you can go to the failed build and check "Console Output" to find out the reason and fix this. Otherwise, you can sleep well because there is no high severity issues on your code.
&lt;/p&gt;

&lt;p&gt;
Here is an example of an output that you can see on "Console Output" on a build item (You can see it when the job is running, it will be loaded in real-time).
&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/find-security-issues-with-bandit/example-of-output-console.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Thanks for your reading to the end of this post! I also want to thank "Digital Varys" with meaningful preview image!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>bandit</category><category>security</category><guid>https://cocktailmake.github.io/posts/find-security-issues-with-bandit/</guid><pubDate>Sat, 31 Oct 2020 08:43:55 GMT</pubDate></item><item><title>RICHKA Web API</title><link>https://cocktailmake.github.io/posts/richka-web-api/</link><dc:creator>Hitoshi Uchida</dc:creator><description>&lt;div id="outline-container-org430f534" class="outline-2"&gt;
&lt;h2 id="org430f534"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org430f534"&gt;
&lt;p&gt;
RICHKA provides two interfaces with GUI and Web API to enables users
to easily create video data with setting images, videos and texts and
generating videos. In this post, we describe the Web API whose
architecture conforms to the general REST architecture. It enables
users to integrate the primary features of RICHKA into their systems
such as smartphone application to generate videos with using the photo
album.
&lt;/p&gt;

&lt;p&gt;
The main functions of Web API are below, and they are built with &lt;a href="https://www.django-rest-framework.org/"&gt;Django REST Framework&lt;/a&gt;.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Authenticate API clients and publish API tokens&lt;/li&gt;
&lt;li&gt;Get list of projects/videos&lt;/li&gt;
&lt;li&gt;Create projects / videos&lt;/li&gt;
&lt;li&gt;Set images / videos / texts to scenes of videos&lt;/li&gt;
&lt;li&gt;Generate video files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The basic sequence diagram to generate videos is below.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/richka-web-api/sequence.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org44d42ac" class="outline-2"&gt;
&lt;h2 id="org44d42ac"&gt;Client Authentication&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org44d42ac"&gt;
&lt;p&gt;
To call Web API, API clients need to set tokens &lt;code&gt;TOKEN_AUTH&lt;/code&gt; in every
request. The tokens are published with sending HTTP POST to
&lt;code&gt;/api/v1/api-token-auth/&lt;/code&gt; with the account information. API clients
should store the tokens into their database to suppress this API call
every time.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -X POST https://API_HOST/api/v1/accounts/login/ &lt;span class="se"&gt;\&lt;/span&gt;
     -H &lt;span class="s1"&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     -d &lt;span class="s1"&gt;'{&lt;/span&gt;
&lt;span class="s1"&gt;       "email": "USER_EMAIL",&lt;/span&gt;
&lt;span class="s1"&gt;       "password": "USER_PASSWORD"&lt;/span&gt;
&lt;span class="s1"&gt;     }'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0dc33eb" class="outline-2"&gt;
&lt;h2 id="org0dc33eb"&gt;Create New Project&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0dc33eb"&gt;
&lt;p&gt;
A new project directory is created with sending HTTP POST to
&lt;code&gt;/api/v1/projects/&lt;/code&gt; as below.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -X POST https://API_HOST/api/v1/projects/ &lt;span class="se"&gt;\&lt;/span&gt;
     -H &lt;span class="s1"&gt;'Authorization: Token TOKEN_AUTH'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     -H &lt;span class="s1"&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     -d &lt;span class="s1"&gt;'{&lt;/span&gt;
&lt;span class="s1"&gt;       "name": "New Project",&lt;/span&gt;
&lt;span class="s1"&gt;       "is_shared": true&lt;/span&gt;
&lt;span class="s1"&gt;     }'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The ID of the created project &lt;code&gt;PROJECT_ID&lt;/code&gt; is returned to the clients.
The detail information of the project can be obtained with sending
HTTP GET to &lt;code&gt;/v1/projects/PROJECT_ID/&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdab025b" class="outline-2"&gt;
&lt;h2 id="orgdab025b"&gt;Get a list of video templates&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdab025b"&gt;
&lt;p&gt;
API clients can get a list of available template IDs TEMPLATE_ID with
sending HTTP GET to &lt;code&gt;/api/v1/template_groups/&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -X GET https://API_HOST/api/v1/template_groups/ &lt;span class="se"&gt;\&lt;/span&gt;
     -H &lt;span class="s1"&gt;'Authorization: Token TOKEN_AUTH'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     -H &lt;span class="s1"&gt;'Content-Type: application/json'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0c0b694" class="outline-2"&gt;
&lt;h2 id="org0c0b694"&gt;Create New Video Data&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0c0b694"&gt;
&lt;p&gt;
A new video data is created with sending HTTP POST to
&lt;code&gt;/api/v1/videos/&lt;/code&gt; with specifying the created project id &lt;code&gt;PROJECT_ID&lt;/code&gt;
and the selected video template &lt;code&gt;TEMPLATE_ID&lt;/code&gt;.  The ID of the created
video data &lt;code&gt;VIDEO_ID&lt;/code&gt; is returned to the clients.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -X POST https://API_HOST/api/v1/videos/ &lt;span class="se"&gt;\&lt;/span&gt;
     -H &lt;span class="s1"&gt;'Authorization: Token TOKEN_AUTH'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     -H &lt;span class="s1"&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     -d &lt;span class="s1"&gt;'{&lt;/span&gt;
&lt;span class="s1"&gt;       "name": "your video title",&lt;/span&gt;
&lt;span class="s1"&gt;       "project_id": "PROJECT_ID",&lt;/span&gt;
&lt;span class="s1"&gt;       "template_id": TEMPLATE_ID&lt;/span&gt;
&lt;span class="s1"&gt;     }'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9266698" class="outline-2"&gt;
&lt;h2 id="org9266698"&gt;Set Images / Videos / Texts into Scenes&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9266698"&gt;
&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/richka-web-api/api-scene-setting.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
For 1st step, API clients need to upload the image/video files to be
available in the video data with &lt;code&gt;VIDEO_ID&lt;/code&gt;.
Then &lt;code&gt;IMAGE_NAME_1&lt;/code&gt; and &lt;code&gt;IMAGE_NAME_2&lt;/code&gt; are returned to the clients.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="n"&gt;POST&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;API_HOST&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;videos&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;VIDEO_ID&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; \
     &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="s1"&gt;'Authorization: Token TOKEN_AUTH'&lt;/span&gt; \
     &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="s1"&gt;'content-type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW'&lt;/span&gt; \
     &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="s1"&gt;'files[]=@/path/to/image/1.png'&lt;/span&gt; \
     &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="s1"&gt;'files[]=@/path/to/image/2.jpeg'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
After uploading the file contents, API clients can set the images into
scenes of the video data with using the identifiers &lt;code&gt;IMAGE_NAME_1&lt;/code&gt; and
&lt;code&gt;IMAGE_NAME_2&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="n"&gt;PUT&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;API_HOST&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;videos&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;VIDEO_ID&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; \
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="s1"&gt;'Authorization: Token TOKEN_AUTH'&lt;/span&gt; \
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="s1"&gt;'Content-Type: application/json'&lt;/span&gt; \
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="s1"&gt;'{&lt;/span&gt;
    &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"New video'&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s2"&gt;'s name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"bgm_file"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BGM_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"memo"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"New Memo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"slides"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
	&lt;span class="p"&gt;{&lt;/span&gt;
	    &lt;span class="s2"&gt;"index"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	    &lt;span class="s2"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"ãã­ã¹ã"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	    &lt;span class="s2"&gt;"image_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"IMAGE_NAME_1"&lt;/span&gt;
	&lt;span class="p"&gt;},&lt;/span&gt;
	&lt;span class="p"&gt;{&lt;/span&gt;
	    &lt;span class="s2"&gt;"index"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	    &lt;span class="s2"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"ãã­ã¹ã"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	    &lt;span class="s2"&gt;"image_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"IMAGE_NAME_2"&lt;/span&gt;
	&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5b18dc6" class="outline-2"&gt;
&lt;h2 id="org5b18dc6"&gt;Generate Videos&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5b18dc6"&gt;
&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/richka-web-api/api-video-generation.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
After the scenes have been set up, API clients can request to start
the video generation with video servers.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -X POST https://API_HOST/api/v1/videos/VIDEO_ID/generate/ &lt;span class="se"&gt;\&lt;/span&gt;
     -H &lt;span class="s1"&gt;'Authorization: Token TOKEN_AUTH'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     -H &lt;span class="s1"&gt;'Content-Type: application/json'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
When the video generation has been done, a Webhook URL registered in
the account setting page beforehand will be called back with sending
&lt;code&gt;VIDEO_ID&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
  video_id: VIDEO_ID,
  user_id: xxxxx,
  time: &lt;span class="m"&gt;2020&lt;/span&gt;-01-01 &lt;span class="m"&gt;01&lt;/span&gt;:02:03,
  webhook_id: &lt;span class="m"&gt;1234&lt;/span&gt;,
  type: webhook
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org899fbac" class="outline-2"&gt;
&lt;h2 id="org899fbac"&gt;Download Video Contents&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org899fbac"&gt;
&lt;p&gt;
API clients can get the downloadable S3 URLs with sending HTTP GET
with &lt;code&gt;/api/v1/videos/VIDEO_ID/&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -X GET https://API_HOST/api/v1/videos/VIDEO_ID/ &lt;span class="se"&gt;\&lt;/span&gt;
     -H &lt;span class="s1"&gt;'Authorization: Token TOKEN_AUTH'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     -H &lt;span class="s1"&gt;'Content-Type: application/json'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>Web API</category><guid>https://cocktailmake.github.io/posts/richka-web-api/</guid><pubDate>Fri, 16 Oct 2020 06:38:24 GMT</pubDate></item><item><title>Our Git Habit of Narration Recording project</title><link>https://cocktailmake.github.io/posts/narration-recording-git-habit/</link><dc:creator>Duc To</dc:creator><description>&lt;div id="outline-container-orgefcd2c7" class="outline-2"&gt;
&lt;h2 id="orgefcd2c7"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgefcd2c7"&gt;
&lt;p&gt;
We released a new web application called &lt;b&gt;&lt;span style="color: red"&gt;ãã¬æ®ã&lt;/span&gt;&lt;/b&gt;
which enables users to record the voice as narration on web browsers
and combine them with video sources and generate videos in last month.
In this post, we introduce our daily Git habit how to handle multiple
branches to add new features and release official versions and hotfix
releasing for bug fixing as professional development.
&lt;/p&gt;

&lt;p&gt;
Our development team refers to a good article of &lt;a href="https://nvie.com/posts/a-successful-git-branching-model/"&gt;Git Workflow&lt;/a&gt; and the
format of commit log of &lt;a href="https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit"&gt;AngularJS guys&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/narration-recording-git-habit/git-model@2x.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge7f2ed0" class="outline-2"&gt;
&lt;h2 id="orge7f2ed0"&gt;Branches&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge7f2ed0"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1003e5e" class="outline-3"&gt;
&lt;h3 id="org1003e5e"&gt;Feature branches&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1003e5e"&gt;
&lt;p&gt;
When you develop new features or fix bugs and the total modified lines
will be relatively larger compared with prior ones you developed, then
you should create new branches and merge after finishing the
developments as general Git culture.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4b1fd48" class="outline-3"&gt;
&lt;h3 id="org4b1fd48"&gt;Stage branch&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4b1fd48"&gt;
&lt;p&gt;
It is a primary development branch and feature branches will be merged
to stage branch after successfully tested and reviewed.
&lt;/p&gt;

&lt;p&gt;
This branch is a head of any other branches, but there is a
possibility any degrade happens with merging the working branches into
this branch. Therefore we can't release this branch as official
version right now.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org160236d" class="outline-3"&gt;
&lt;h3 id="org160236d"&gt;Release branches&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org160236d"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;On each release, we create a new release branch based on latest
stage branch for both recording and video repositories (even though
there may not have any changes since last release for one
repository).&lt;/li&gt;
&lt;li&gt;The release branch should be named as &lt;b&gt;&lt;b&gt;release/[VERSION_NUMBER]&lt;/b&gt;&lt;/b&gt;.&lt;/li&gt;
&lt;li&gt;Sometimes a hotfix releasing is needed and we can apply hotfix commits to
the release branches&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/narration-recording-git-habit/hotfix-branches@2x.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0d02ab1" class="outline-3"&gt;
&lt;h3 id="org0d02ab1"&gt;Tags&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0d02ab1"&gt;
&lt;p&gt;
Tags are created with the release branches of both recording and video repositories
after the final reviewing the release has been successfully passed.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/narration-recording-git-habit/git-model@2x.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbe946ce" class="outline-2"&gt;
&lt;h2 id="orgbe946ce"&gt;Commit logs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbe946ce"&gt;
&lt;p&gt;
We apply &lt;a href="https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit"&gt;3rd party knowledge&lt;/a&gt; for the format of commit logs from AngularJS guys.
We follow the tiny rule in the article as below.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;type&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;scope&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;: &amp;lt;subject&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Type : Must be one of the following:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;| Type     | Meaning                                                                                                |
|----------+--------------------------------------------------------------------------------------------------------|
| feat     | A new feature                                                                                          |
| fix      | A bug fix                                                                                              |
| docs     | Documentation only changes                                                                             |
| style    | Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc) |
| refactor | A code change that neither fixes a bug nor adds a feature                                              |
| perf     | A code change that improves performance                                                                |
| test     | Adding missing or correcting existing tests                                                            |
| chore    | Changes to the build process or auxiliary tools and libraries such as documentation generation         |
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For examples, our commit logs would be below.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fix(gui): Fixed file uploading. Refs #REC-XXX
fix(video): Make ffmpeg video generation more stable. Refs #REC-XXX
test(django): Added new tests for admin contract page. Refs #REC-XXX
feat(gui) : Added Narration script function. Refs #REC-XXX 
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc4aa91d" class="outline-2"&gt;
&lt;h2 id="orgc4aa91d"&gt;Utilize special keywords in commit logs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc4aa91d"&gt;
&lt;p&gt;
When we commit, we fill understandable commit logs and use special
keywords such as Refs #TICKET_NUMBER to make the references with the
corresponding tickets.  Therefore before committing, we create tickets
at first and make the references with the commit logs.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgcca7d04" class="outline-2"&gt;
&lt;h2 id="orgcca7d04"&gt;Rules for merging&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgcca7d04"&gt;
&lt;p&gt;
When we merge branches, we have a rule to add "&lt;b&gt;&lt;b&gt;âno-ff&lt;/b&gt;&lt;/b&gt;" as command
option to suppress fast-forward of the default behavior of Git.
&lt;/p&gt;

&lt;p&gt;
For examples: &lt;code&gt;git merge --no-ff feature/REC-00&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf39a98b" class="outline-2"&gt;
&lt;h2 id="orgf39a98b"&gt;Modification of DB models&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf39a98b"&gt;
&lt;p&gt;
When we modify the models of Django with development tasks, we do that
on stage branch at first. We sometimes encountered DB migration issue
on stage branch and it also caused runtime issues on our individual
working branches. To prevent from happening the same issue, we applied
a simple work flow to modify DB models only on stage branch.
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;If you need to modify models of Django, checkout stage branch at first&lt;/li&gt;
&lt;li&gt;Modify the models and execute migration against staging DB&lt;/li&gt;
&lt;li&gt;Merge stage branch into your working branches&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>git</category><guid>https://cocktailmake.github.io/posts/narration-recording-git-habit/</guid><pubDate>Sun, 20 Sep 2020 03:00:00 GMT</pubDate></item><item><title>Emacs modeline enhancement for Git diff</title><link>https://cocktailmake.github.io/posts/emacs-modeline-enhancement-for-git-diff/</link><dc:creator>Hitoshi Uchida</dc:creator><description>&lt;div id="outline-container-orgc1a9ee9" class="outline-2"&gt;
&lt;h2 id="orgc1a9ee9"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc1a9ee9"&gt;
&lt;p&gt;
Emacs has a built-in function vc-mode to work with version control
systems such as CVS, Subversion, Git and so on. It enables to show
diff / commit logs and commit codes without working with the
dedicated commands on terminal applications. For Git, we can operate
general git commands such as status / log / diff / checkout / commit /
push. The screenshot below is a sample of vc-diff command to show git
diff.
&lt;/p&gt;

&lt;p&gt;
In this post, a utility function to enhance vc-diff command for Git is
introduced with changing the behavior of the internal function of
vc-git.el and improve the modeline for efficient coding.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/emacs-modeline-enhancement-for-git-diff/vc.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orge646e04" class="outline-2"&gt;
&lt;h2 id="orge646e04"&gt;Show the numbers of diff lines on modeline&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge646e04"&gt;
&lt;p&gt;
When we open a file on Emacs tracked by Git, the branch name is shown
on the modeline. This build-in feature is enabled by a lisp function
vc-git-mode-line-string below defined in vc-git.el. We will extend
the build-in behavior with &lt;b&gt;&lt;b&gt;defadvice&lt;/b&gt;&lt;/b&gt; to show the numbers of diff
lines on modeline.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;+---[/usr/share/emacs/26.3/lisp/vc/vc-git.el.gz:339]&lt;/span&gt;
&lt;span class="nv"&gt;| (defun vc-git-mode-line-string (file)&lt;/span&gt;
&lt;span class="nv"&gt;|&lt;/span&gt;   &lt;span class="s"&gt;"Return a string for `vc-mode-line' to put in the mode line for FILE."&lt;/span&gt;
&lt;span class="nv"&gt;|   (let* ((rev (vc-working-revision file 'Git))&lt;/span&gt;
&lt;span class="nv"&gt;|&lt;/span&gt;          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;disp-rev&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;vc-git--symbolic-ref&lt;/span&gt; &lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;|                        (substring rev 0 7)))&lt;/span&gt;
&lt;span class="nv"&gt;|&lt;/span&gt;          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;def-ml&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;vc-default-mode-line-string&lt;/span&gt; &lt;span class="ss"&gt;'Git&lt;/span&gt; &lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nv"&gt;|          (help-echo (get-text-property 0 'help-echo def-ml))&lt;/span&gt;
&lt;span class="nv"&gt;|&lt;/span&gt;          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;face&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;get-text-property&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ss"&gt;'face&lt;/span&gt; &lt;span class="nv"&gt;def-ml&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="nv"&gt;|     (propertize (concat (substring def-ml 0 4) disp-rev)&lt;/span&gt;
&lt;span class="nv"&gt;|&lt;/span&gt;                 &lt;span class="ss"&gt;'face&lt;/span&gt; &lt;span class="nv"&gt;face&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;                 &lt;span class="ss"&gt;'help-echo&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;concat&lt;/span&gt; &lt;span class="nv"&gt;help-echo&lt;/span&gt; &lt;span class="s"&gt;"\nCurrent revision: "&lt;/span&gt; &lt;span class="nv"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="nv"&gt;+---&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
To show the information of git diff, we can get each number of
added/deleted lines with using &lt;b&gt;&lt;b&gt;git diff ânumstat â FILE_NAME&lt;/b&gt;&lt;/b&gt;. An
sample output with the command is below and the 1st column is the
numbers of lines added to files and the 2nd one is the ones of deleted
lines. If we execute with specifying a filename, we can get only for the file.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git diff --numstat --
7       6       .bashrc
2       1       .bashrc-common
34      9       .emacs
1       0       .folders
4       4       .ssh/config-home
5       1       emacslib/.aspell.en.pws
4       3       emacslib/meeting-dev.template
2       2       emacslib/my-edit.el
108     11      emacslib/my-org.el
4       60      emacslib/my-wl.el
101     55      emacslib/wl-common.el
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The lisp function below is the final output of the utility function.
The number of added lines is shown with green3 and the one of deleted lines is shown
with a color predefined by font-lock-warning-face.
If there is no diff on the opened file, "â" is shown.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;defadvice&lt;/span&gt; &lt;span class="nv"&gt;vc-git-mode-line-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;after&lt;/span&gt; &lt;span class="nv"&gt;plus-minus&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;compile&lt;/span&gt; &lt;span class="nv"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;"Show the information of git diff on modeline."&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ad-return-value&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;concat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;propertize&lt;/span&gt; &lt;span class="nv"&gt;ad-return-value&lt;/span&gt; &lt;span class="ss"&gt;'face&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:foreground&lt;/span&gt; &lt;span class="s"&gt;"white"&lt;/span&gt; &lt;span class="ss"&gt;:weight&lt;/span&gt; &lt;span class="nv"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
		&lt;span class="s"&gt;" ["&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;plus-minus&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;vc-git--run-command-string&lt;/span&gt;
				   &lt;span class="nv"&gt;file&lt;/span&gt; &lt;span class="s"&gt;"diff"&lt;/span&gt; &lt;span class="s"&gt;"--numstat"&lt;/span&gt; &lt;span class="s"&gt;"--"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
		  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;plus-minus&lt;/span&gt;
		       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;string-match&lt;/span&gt; &lt;span class="s"&gt;"^\\([0-9]+\\)\t\\([0-9]+\\)\t"&lt;/span&gt; &lt;span class="nv"&gt;plus-minus&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
		       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;concat&lt;/span&gt;
			&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;propertize&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"+%s"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;match-string&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;plus-minus&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ss"&gt;'face&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:foreground&lt;/span&gt; &lt;span class="s"&gt;"green3"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
			&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;propertize&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"-%s"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;match-string&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nv"&gt;plus-minus&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ss"&gt;'face&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:inherit&lt;/span&gt; &lt;span class="nv"&gt;font-lock-warning-face&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
		    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;propertize&lt;/span&gt; &lt;span class="s"&gt;"â"&lt;/span&gt; &lt;span class="ss"&gt;'face&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:foreground&lt;/span&gt; &lt;span class="s"&gt;"green3"&lt;/span&gt; &lt;span class="ss"&gt;:weight&lt;/span&gt; &lt;span class="nv"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
		&lt;span class="s"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
As a screenshot below, the diff information is shown on modeline with the branch name.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/emacs-modeline-enhancement-for-git-diff/modeline.png" alt="nil"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>git</category><guid>https://cocktailmake.github.io/posts/emacs-modeline-enhancement-for-git-diff/</guid><pubDate>Sun, 30 Aug 2020 13:00:00 GMT</pubDate></item><item><title>The prototype of Morphing</title><link>https://cocktailmake.github.io/posts/the-prototype-of-morphing/</link><dc:creator>Bui Dinh Cuong</dc:creator><description>&lt;div id="outline-container-orgbef4249" class="outline-2"&gt;
&lt;h2 id="orgbef4249"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbef4249"&gt;
&lt;p&gt;
In this post, we introduce HyperMorph on HTML5 that allow us to create motions of objects and then export these motions into video files.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc592ea6" class="outline-2"&gt;
&lt;h2 id="orgc592ea6"&gt;Definitions&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc592ea6"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2ff595b" class="outline-3"&gt;
&lt;h3 id="org2ff595b"&gt;Morphing&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2ff595b"&gt;
&lt;p&gt;
Morphing is a special effect in motion pictures and animations that change (or morphs) one image or shape into another through a seamless transition. Traditionally such a depiction would be achieved through dissolving techniques on film. Since the early 1990s, this has been replaced by computer software to create more realistic transitions. A similar method is applied to audio recordings in similar fashion, for example, by changing voices or vocal lines.
&lt;/p&gt;

&lt;p&gt;
Source: &lt;a href="https://en.wikipedia.org/wiki/Morphing"&gt;https://en.wikipedia.org/wiki/Morphing&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6ffa1b2" class="outline-3"&gt;
&lt;h3 id="org6ffa1b2"&gt;HyperMorph&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6ffa1b2"&gt;
&lt;p&gt;
There are many terminologies on HyperMorph that you can check on &lt;a href="https://blog.altair.co.kr/wp-content/uploads/2011/03/hypermorph.pdf"&gt;https://blog.altair.co.kr/wp-content/uploads/2011/03/hypermorph.pdf&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Within this post, we just define a simple definition about HyperMorph on video generation. It is a set of points from a 1st image and a corresponding set of points from a 2nd image.
A special effect will change two sets together and makes the 1st image become the 2nd image and vice versa.
When we define enough of points, it will be able to create very smooth video.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org59d60c7" class="outline-2"&gt;
&lt;h2 id="org59d60c7"&gt;How to create HyperMorph from two images with HTML &amp;amp; JavaScript&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org59d60c7"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Define the set of points on the 1st image and a corresponding set of points from 2nd image.&lt;/li&gt;
&lt;li&gt;Using HTML5 canvas to draw a shrink image based on moving points between two sets and merge two images.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/the-prototype-of-morphing/dog_and_cat.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;With each moving step, capture the image on the canvas and add it as a frame of a video.&lt;/li&gt;
&lt;li&gt;When capture enough frames of a video, we can export these frames into a video file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
And here is the output video (I converted to GIF file to display here easily):
&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="https://cocktailmake.github.io/images/the-prototype-of-morphing/video.gif" alt="nil"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://cocktailmake.github.io/posts/the-prototype-of-morphing/</guid><pubDate>Fri, 14 Aug 2020 06:00:00 GMT</pubDate></item><item><title>Using Sentry to debug JavaScript in the RICHKA front end</title><link>https://cocktailmake.github.io/posts/using-sentry-to-debug-javascript-in-the-richka-frontend/</link><dc:creator>Le Thanh Tung</dc:creator><description>&lt;div id="outline-container-orgaff90b9" class="outline-2"&gt;
&lt;h2 id="orgaff90b9"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgaff90b9"&gt;
&lt;p&gt;
Sentry is a service that helps you to monitor and fix crashes in realtime.
Sentry has many official Sentry SDKs such as: JavaScript, React-Native, Python, Ruby, PHP, Go, Rust, Java, Objective-C/Swift, C#, Perl, Elixir, Laravel.
In this post, we describe our usage of Sentry for JavaScript to debug RICHKA front end.
After using Sentry for a while, we see a lot of bugs in production environment. Information is quite detailed so it's easy to address.
I rate it very useful to debug in front end.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3485dd9" class="outline-2"&gt;
&lt;h2 id="org3485dd9"&gt;General usage of Sentry JavaScript&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3485dd9"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;First of all, we need to create Sentry account and create Project to debug. We can see debug logs in Sentry account 15-60 seconds after events occurred. Because Sentry account can join many organizations and many Projects so Sentry debug logs can be shared to all of developers.&lt;/li&gt;

&lt;li&gt;In separated logs, we can assign to specific developers and comment, set statuses.&lt;/li&gt;

&lt;li&gt;Because RICHKA Project developed by Django and Python, we configure Sentry JavaScript as base template. In Sentry account management, we can see a configuration or we can see a common JavaScript configuration in &lt;a href="https://docs.sentry.io/sdks/javascript/"&gt;here&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;Sentry integrates many third software : Slack, Git, GitLab, JIRA, Microsoft team, â¦ RICHKA developers discuss in Slack so we integrated Sentry to Slack.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Here are some examples.
&lt;/p&gt;


&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/sentry-javascript/error_detail.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/sentry-javascript/events_before.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org5f0dcd7" class="outline-2"&gt;
&lt;h2 id="org5f0dcd7"&gt;Integration between Sentry debug and Slack&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5f0dcd7"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Create a new channel in Slack.&lt;/li&gt;
&lt;li&gt;Access Sentry project and Settings &amp;gt; Integrations &amp;gt; Slack and login Slack account.&lt;/li&gt;
&lt;li&gt;Assign a channel to report debug logs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/sentry-javascript/slack_report.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
If a debug event occurs, Sentry server will send a post to the channel. Developers can easily track them.
Note: if there're a lot of events, we need to configure number of posts in a channel.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0f50933" class="outline-2"&gt;
&lt;h2 id="org0f50933"&gt;Customize data in debug log&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0f50933"&gt;
&lt;p&gt;
Because the size of the data sent to Sentry server is limited and length of additional data in Sentry log is too. So we need to create a function to split data.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;function sentry_capture_message(data, extra, message) {
    Sentry.withScope(scope =&amp;gt; {
	if (Array.isArray(data))
	{
	    let i = 0;
	    for (let datum of data){
		if (typeof datum == 'string') {
		    if (datum.length &amp;gt;= 16000 &amp;amp;&amp;amp; datum.length &amp;lt;= 1024 * 1024) {
			let stringArray = datum.split('\n');
			for (let j = 0; j &amp;lt; stringArray.length; j++) {
			    if (stringArray[j].trim().length &amp;gt; 0) {
				i++;
				scope.setExtra(extra + sprintf("%04d",i), stringArray[j]);
			    }
			}
		    }
		}
		else {
		    scope.setExtra(extra + sprintf("%04d",i), datum);
		    i++;
		}
	    }
	}
	else scope.setExtra(extra, data);
	Sentry.captureMessage(message);
    });
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For example about a target function to debug:
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;function deleteSearchKeyword(data_id){
    if($('#stock-video &amp;gt; .stock_list &amp;gt; li.video').length &amp;gt; 0){
	$('#stock-video &amp;gt; .stock_list &amp;gt; li.video').each(function(i, elem){
	    let src = $(elem).find('p span video').attr('src');
	    if(!src || src.endsWith('/static/')){
		$(elem).remove();
	    }
	});
	$('div#stock-video &amp;gt; div.stock_title').hide();
	$('.stock_more').hide();
    }
    if ($('#stock-photo &amp;gt; .stock_list').length &amp;gt; 0 || $('#stock-video &amp;gt; .stock_list').length &amp;gt; 0) {
	var materials_id = [];
	$.each($('.materialIndex'), function(i,v) {
	    materials_id.push($(v).val());
	});
	var el = $('.delete-keyword');
	$.ajax({
	    'url': '/delete_material_when_redirect',
	    'type': 'POST',
	    'data': {
		'video_data_id': data_id,
		'materials_id': materials_id
	    },
	    'dataType': 'json',
	    'async': true,
	    'success': function (response) {
		if (!response.result) {
		    console.warn('åé¤ä¸­ã«ã¨ã©ã¼ãçºçãã¾ãã : deleteSearchKeyword');
		    sentry_capture_message([data_id, response], 'response', `Delete Material When Redirect Error`);
		}
	    },
	    'error': function(err) {
		sentry_capture_message([data_id, err.responseText], 'response', `Delete Material When Redirect Error`);
	    }
	});
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Here are some of the results after customization.
The logs with prefix response0000, response0044 - response0054 are the ones split by our custom JavaScript function sentry_capture_message.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/sentry-javascript/additonal_data.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/sentry-javascript/additonal_data2.png" alt="nil"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><guid>https://cocktailmake.github.io/posts/using-sentry-to-debug-javascript-in-the-richka-frontend/</guid><pubDate>Thu, 13 Aug 2020 01:53:48 GMT</pubDate></item></channel></rss>