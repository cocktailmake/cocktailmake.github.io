<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RICHKA Developer Blog (Posts about JavaScript)</title><link>https://cocktailmake.github.io/</link><description></description><atom:link href="https://cocktailmake.github.io/categories/javascript.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2021 &lt;a href="mailto:"&gt;RICHKA&lt;/a&gt; </copyright><lastBuildDate>Wed, 20 Jan 2021 07:06:10 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>FFmpeg WASM</title><link>https://cocktailmake.github.io/posts/ffmpeg-wasm/</link><dc:creator>Duc To</dc:creator><description>&lt;div id="outline-container-org3632b1d" class="outline-2"&gt;
&lt;h2 id="org3632b1d"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3632b1d"&gt;
&lt;p&gt;
&lt;b&gt;FFmpeg WASM&lt;/b&gt; is a pure WebAssembly / JavaScript port of FFmpeg. It enables video &amp;amp; audio record, convert and stream right inside browsers.
The main Git repository for it is &lt;a href="https://github.com/ffmpegwasm/ffmpeg.wasm"&gt;https://github.com/ffmpegwasm/ffmpeg.wasm&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/ffmpeg-wasm/ffmpeg_wasm.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
Right now, in Recording process, we utilize user experience by uploading video source file directly from front-end web browser to S3 without going through any server using presigned S3 URL. The limitation of the approach is that we cannot convert the source video file as needed without going through the server (which increases a lot of waiting time for end users). Some handy cases for that needs are:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Unify video source format to MP4 from different video file formats (AVI, MOV).&lt;/li&gt;
&lt;li&gt;Right now web browser does not support H265 video format and we need to convert to MP4 format to support playing it in web browser.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Based on the above needs, we research &lt;b&gt;FFmpeg WASM&lt;/b&gt; library as we think that it would be nice if we can do the video conversion directly from web browser
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgecd3836" class="outline-2"&gt;
&lt;h2 id="orgecd3836"&gt;Licensing&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgecd3836"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;@ffmpeg/ffmpeg&lt;/code&gt; contains kind of a wrapper to handle the complexity of loading core and calling low-level APIs. It is a small code base and under MIT license.&lt;/li&gt;

&lt;li&gt;&lt;code&gt;@ffmpeg/core&lt;/code&gt; following the same licenses as FFmpeg and its external libraries.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org88d916c" class="outline-2"&gt;
&lt;h2 id="org88d916c"&gt;How it works&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org88d916c"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The only JavaScript file defined in HTML file is &lt;a href="https://unpkg.com/@ffmpeg/ffmpeg@0.9.4/dist/ffmpeg.min.js"&gt;https://unpkg.com/@ffmpeg/ffmpeg@0.9.4/dist/ffmpeg.min.js&lt;/a&gt; but actually it is just a wrapper.&lt;/li&gt;
&lt;li&gt;Based on the actual need in our triggered ffmpeg function, the JavaScript will load ffmpeg/core file &lt;code&gt;*ffmpeg-core.wasm&lt;/code&gt; and its JavaScript file &lt;code&gt;*ffmpeg-core.js&lt;/code&gt;. The size of &lt;code&gt;ffmpeg-core.wasm&lt;/code&gt; at the time of testing is 22MB.&lt;/li&gt;
&lt;li&gt;Sometimes we may need to use the newest version of &lt;code&gt;@ffmpeg/core&lt;/code&gt; and we can define it using customized path.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ffmpeg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createFFmpeg&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;corePath&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'../../../src/ffmpeg-core.js'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;We can re-compile ffmpeg-core by checking &lt;b&gt;build.sh&lt;/b&gt; inside &lt;a href="https://github.com/ffmpegwasm/ffmpeg.wasm-core"&gt;https://github.com/ffmpegwasm/ffmpeg.wasm-core&lt;/a&gt; repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge4ea929" class="outline-2"&gt;
&lt;h2 id="orge4ea929"&gt;Testing example&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge4ea929"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;In the demo below, user will have an upload button to upload source video file, which can be in either webm, MOV or H.265 MP4 format.&lt;/li&gt;
&lt;li&gt;It takes several minutes to transcode and you can monitor the progress on the console of DevTool.&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src="https://test.prototype.richka.co/~duc/wasm/" style="width:100%; height: 400px;"&gt;&lt;/iframe&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;The source of the sample demo is below.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;body&amp;gt;
  &amp;lt;video id="player" controls&amp;gt;&amp;lt;/video&amp;gt;
  &amp;lt;input type="file" id="uploader"&amp;gt;
  &amp;lt;script src="https://unpkg.com/@ffmpeg/ffmpeg@0.9.4/dist/ffmpeg.min.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script&amp;gt;
    const { createFFmpeg, fetchFile } = FFmpeg;
    const ffmpeg = createFFmpeg({ log: true });
    const transcode = async ({ target: { files } }) =&amp;gt; {
      const { name } = files[0];
      await ffmpeg.load();
      ffmpeg.FS('writeFile', name, await fetchFile(files[0]));
      await ffmpeg.run('-i', name,  'output.mp4');
      //await ffmpeg.run('-i', name, '-q:v', 0, 'output.mp4');
      const data = ffmpeg.FS('readFile', 'output.mp4');
      const video = document.getElementById('player');
      video.src = URL.createObjectURL(new Blob([data.buffer], { type: 'video/mp4' }));
    }

    document.getElementById('uploader').addEventListener('change', transcode);
  &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;When user click upload button and select a MOV video file, &lt;b&gt;FFmpeg WASM&lt;/b&gt; library will be called to converted it to MP4 file (output.mp4).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/ffmpeg-wasm/wasm_upload.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;User can trace the conversion status, as normal ffmpeg oss by its output in console log&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/ffmpeg-wasm/console_log1.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/ffmpeg-wasm/console_log2.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/ffmpeg-wasm/console_log3.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;When the conversion is completed, JS loads HTML video tag's source with the converted video's data and display on screen.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/ffmpeg-wasm/conversion_output.png" alt="nil"&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;User flow diagram can be described as below&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/ffmpeg-wasm/wasm_figure1.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5726503" class="outline-2"&gt;
&lt;h2 id="org5726503"&gt;Testing result&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5726503"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;We made 4 test cases converting from different source video format to MP4 format:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;WebM&lt;/b&gt;: It is successful and the conversion time is fast. For around 8MB video it took less than 2 minutes.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;H.265&lt;/b&gt;: It is successful but the progress takes very long to complete, more than 6 minutes while if we do it with ffmpeg command it is just around 3 minutes. So nearly double the time.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;General MOV file from Internet&lt;/b&gt;: It is successful and the conversion time is quite fast, around 2 minutes.&lt;/li&gt;
&lt;li&gt;MOV file which recorded from MacOS: It is failed after few seconds using &lt;b&gt;FFmpeg WASM&lt;/b&gt; library but it is successful using ffmpeg command.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;General MOV file from Internet&lt;/b&gt;: It is successful and the conversion time is quite fast, around 2 minutes.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
At the moment of writing this article, &lt;b&gt;FFmpeg WASM&lt;/b&gt; is twice slower and unstable, but it is worth monitoring the future progress, and we may use WASM of ImageMagic in the future.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>JavaScript</category><category>wasm</category><guid>https://cocktailmake.github.io/posts/ffmpeg-wasm/</guid><pubDate>Wed, 06 Jan 2021 05:00:00 GMT</pubDate></item><item><title>Web Workers API</title><link>https://cocktailmake.github.io/posts/web-workers-api/</link><dc:creator>Hitoshi Uchida</dc:creator><description>&lt;div id="outline-container-org377ff43" class="outline-2"&gt;
&lt;h2 id="org377ff43"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org377ff43"&gt;
&lt;p&gt;
In this post, we describe Web Workers API which was introduced in 2010 as
one of HTML5. The technology is based on &lt;b&gt;&lt;b&gt;fork&lt;/b&gt;&lt;/b&gt; to create a new sub
process and Web Workers API enables web applications to fork an
independent worker process in JavaScript world. The worker process has
its own memory space and the parent main process isn't affected even
if the forked process is crashed as general process system.
&lt;/p&gt;

&lt;p&gt;
The practical use case is Slack that a dedicated worker process gets
the notification from the server side. The worker process starts to
run when we open on web browsers and it continues to stay until we
close the browser tabs.
&lt;/p&gt;

&lt;p width="1500px"&gt;
&lt;img src="https://cocktailmake.github.io/images/web-workers-api/slack-workers.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgb863b9b" class="outline-2"&gt;
&lt;h2 id="orgb863b9b"&gt;Architecture of Web Workers API&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb863b9b"&gt;
&lt;p&gt;
The usage of Web Workers API is to communicate between a main process
and a worker process with using &lt;b&gt;Worker.prototype.postMessage(message,
[transfer])&lt;/b&gt; and &lt;b&gt;worker.onmessage handler&lt;/b&gt;.  The data sent by
postMessage() is internally converted into string data and passed into
the worker processes. The onmessage() of receiver side is called back
with the posted data.
&lt;/p&gt;

&lt;p&gt;
MDN : &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API"&gt;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&lt;/a&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+--------------+ postMessage()      onmessage() +-------------------+
|              |-------------------------------&amp;gt;|                   |
|   main.js    | onmessage()      postMessage() |     worker.js     |
|              |&amp;lt;-------------------------------|                   |
+--------------+                                +-------------------+
       |
       |
+--------------+
|   main.html  |
+--------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc3256b3" class="outline-3"&gt;
&lt;h3 id="orgc3256b3"&gt;Implicit Side effect&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc3256b3"&gt;
&lt;p&gt;
The general use case is to fork tiny processes running for a long time
whose CPU loads are small as general resident application as
Slack. However, we need to carefully consider the use cases before
actually using on production because the load of CPU and consumed
memory may not be small. The fork processing also consumes CPU
resource because it take time to allocate its own memory. In addition,
we should carefully consider the frequency to communicate between the
main process and the worker process because frequent communication
increases the load of CPU. The data sent between them is internally
converted into &lt;b&gt;string data&lt;/b&gt; because the memory space is different and
it is impossible to refer to an address of an object of another process.
&lt;/p&gt;

&lt;p&gt;
It is easy to use Web Worker API, but the developers should understand
the heavy load of internal processing and the background of
independent memory spaces. Otherwise, your web applications would
encounter serious issues of low performance and high CPU usage.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org33ecc4f" class="outline-2"&gt;
&lt;h2 id="org33ecc4f"&gt;#1 Sample program the worker process sends newly found prime&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org33ecc4f"&gt;
&lt;p&gt;
A 1st sample program is to delegate a dedicated process which
continues to find prime numbers in the worker process and send to the
main process. The sequence diagram between main and worker process is
below.
&lt;/p&gt;

&lt;p width="1500px"&gt;
&lt;img src="https://cocktailmake.github.io/images/web-workers-api/demo-prime-sequence-large.png" alt="nil"&gt;
&lt;/p&gt;


&lt;p&gt;
The source code of main process is below. A worker object is
instantiated with specifying the source file "basic.js" of the worker
process. Then the worker process is internally forked and starts to
run. Then, CPU usage is increased in this timing. Therefore, it is
good strategy to delay the timing to fork until the dedicated process
is actually needed for better performance.
&lt;/p&gt;

&lt;p&gt;
When the worker process finds a new prime, the worker.onmessage(event)
of main process is called back and the prime data can be retrieved
with event.data.
&lt;/p&gt;

&lt;p&gt;
In this sample program, the worker process continues to find new prime
numbers forever, therefore we need a stop button to terminate the
worker process with using worker.terminate().
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang="ja"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
    &amp;lt;script type="text/javascript" src="https://code.jquery.com/jquery-1.9.1.min.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;button id="start"&amp;gt;Start&amp;lt;/button&amp;gt;
    &amp;lt;button id="stop"&amp;gt;Stop&amp;lt;/button&amp;gt;
    &amp;lt;div id="console"&amp;gt;&amp;lt;/div&amp;gt;

    &amp;lt;script type="text/javascript"&amp;gt;
     var worker = null;

     $('#start').on('click', function() {
	 // fork a worker process
	 worker = new Worker('basic.js');
	 // callback hander to receive data from worker process
	 worker.onmessage = function (event) {
	     $('#console').text(event.data);
	 };
     });
     $('#stop').on('click', function() {
	 worker.terminate();
     });
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The source code of worker process is below. When it finds a new prime,
it sends with postMessage() to the main process.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var n = 1;
search: while (true) {
    n += 1;
    for (var i = 2; i &amp;lt;= Math.sqrt(n); i += 1)
	if (n % i == 0)
	    continue search;
    // Send a prime to main process !
    postMessage(n);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb96870e" class="outline-3"&gt;
&lt;h3 id="orgb96870e"&gt;Demo&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb96870e"&gt;
&lt;iframe src="https://test.prototype.richka.co/~uchida/study/worker/basic/basic.html" style="width:600px; height: 300px;"&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org6eafb29" class="outline-2"&gt;
&lt;h2 id="org6eafb29"&gt;#2 Sample program the worker process applies image filer&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6eafb29"&gt;
&lt;p&gt;
The 2st sample program is to delegate image filter processing to a
worker process. The main process sends the pixel data of image files
to the worker process. The filter result is sent back to the main
process and it is rendered onto the canvas.
&lt;/p&gt;

&lt;p&gt;
The sequence diagram between main process and web worker is below.
&lt;/p&gt;

&lt;p width="1500px"&gt;
&lt;img src="https://cocktailmake.github.io/images/web-workers-api/demo-image-filter-sequence-large.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
The source code of the main process is below. The main process sends
the pixel data of a selected image to the worker process with
postMessage().
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang="ja"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;

    &amp;lt;!-- JavaScript Start --&amp;gt;
    &amp;lt;script type="text/javascript" src="https://code.jquery.com/jquery-1.9.1.min.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;!-- JavaScript End --&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div id="console"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;p&amp;gt;
      &amp;lt;label&amp;gt;
	Type an image URL to decode
	&amp;lt;input type="url" id="image-url" list="image-list"&amp;gt;
	&amp;lt;datalist id="image-list"&amp;gt;
	  &amp;lt;option value="http://localhost/~uchida/study/lottie-web/samples/output2/images/img_2.png"&amp;gt;
	  &amp;lt;option value="http://localhost/~uchida/study/lottie-web/samples/output2/images/img_0.png"&amp;gt;
	&amp;lt;/datalist&amp;gt;
      &amp;lt;/label&amp;gt;
    &amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;
      &amp;lt;label&amp;gt;
	Choose a filter to apply
	&amp;lt;select id="filter"&amp;gt;
	  &amp;lt;option value="none"&amp;gt;none&amp;lt;/option&amp;gt;
	  &amp;lt;option value="grayscale"&amp;gt;grayscale&amp;lt;/option&amp;gt;
	  &amp;lt;option value="brighten"&amp;gt;brighten by 20%&amp;lt;/option&amp;gt;
	&amp;lt;/select&amp;gt;
      &amp;lt;/label&amp;gt;
    &amp;lt;/p&amp;gt;

    &amp;lt;div id="output"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script type="module"&amp;gt;
     // init a web worker
     const worker = new Worker("worker.js", { type: "module" });
     worker.onmessage = receiveFromWorker;

     const url = document.querySelector("#image-url");
     const filter = document.querySelector("#filter");
     const output = document.querySelector("#output");

     url.oninput = updateImage;
     filter.oninput = sendToWorker;

     let context, imageData;

     function updateImage() {
	 const img = new Image();
	 console.log(url.value);
	 img.src = url.value;
	 img.onload = () =&amp;gt; {
	     output.innerHTML = "";
	     var canvas = document.createElement("canvas");
	     canvas.width = img.width;
	     canvas.height = img.height;

	     context = canvas.getContext("2d");
	     context.drawImage(img, 0, 0);
	     imageData = context.getImageData(0, 0, canvas.width, canvas.height);
	     console.log(imageData);

	     sendToWorker();
	     output.appendChild(canvas);
	 };
     }
     // send the pixel data to worker process
     function sendToWorker() {
	 worker.postMessage({imageData, filter: filter.value });
     }
     // called back by worker process
     function receiveFromWorker(e) {
	 console.log(e);
	 context.putImageData(e.data, 0, 0);
     }
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The source codes of worker process are below.
It receives the pixel data with being called back with onmessage().
When the worker process has applied image filters, it sends back
to main process with sending postMessage().
&lt;/p&gt;

&lt;p&gt;
worker.js whose role is to communicate with the main process.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import * as filters from "./filters.js";

self.onmessage = (e) =&amp;gt; {
    console.log(e.data);
    const { imageData, filter } = e.data;
    filters[filter](imageData);
    self.postMessage(imageData, [imageData.data.buffer]);
};
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
filter.js whose role is to apply image filters.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export function none() {}

export function grayscale({ data: d }) {
  for (let i = 0; i &amp;lt; d.length; i += 4) {
    const [r, g, b] = [d[i], d[i + 1], d[i + 2]];

    // CIE luminance for the RGB
    // The human eye is bad at seeing red and blue, so we de-emphasize them.
    d[i] = d[i + 1] = d[i + 2] = 0.2126 * r + 0.7152 * g + 0.0722 * b;
  }
};

export function brighten({ data: d }) {
  for (let i = 0; i &amp;lt; d.length; ++i) {
    d[i] *= 1.2;
  }
};
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7720df6" class="outline-3"&gt;
&lt;h3 id="org7720df6"&gt;Demo&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7720df6"&gt;
&lt;iframe src="https://test.prototype.richka.co/~uchida/study/worker/module/1.html" style="position: relative; width:100%; height: 800px;"&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>JavaScript</category><guid>https://cocktailmake.github.io/posts/web-workers-api/</guid><pubDate>Sun, 26 Jul 2020 06:00:00 GMT</pubDate></item></channel></rss>