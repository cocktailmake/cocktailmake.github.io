<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cocktail-Make Developer Blog (Posts about Infra)</title><link>https://cocktailmake.github.io/</link><description></description><atom:link href="https://cocktailmake.github.io/categories/infra.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:"&gt;Cocktail-Make&lt;/a&gt; </copyright><lastBuildDate>Wed, 12 Aug 2020 06:53:14 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Realtime Display of Video Generation Progress</title><link>https://cocktailmake.github.io/posts/progress-display-of-video-generation/</link><dc:creator>Cocktail-Make</dc:creator><description>&lt;p&gt;
Posted by Hitoshi Uchida
&lt;/p&gt;

&lt;div id="outline-container-org6ca6182" class="outline-2"&gt;
&lt;h2 id="org6ca6182"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6ca6182"&gt;
&lt;p&gt;
The video generation in RICHKA is to serialize high quality videos on
video servers with using video templates designed by export
designers. The processing is heavy load and takes several minutes,
therefore RICHKA has a dedicated GUI feature to show the progress
ratio in realtime so that users can check the remained waiting
time. During the processing, video servers monitor the detail
progresses and transmit to web servers to feedback to users on GUI.
&lt;/p&gt;

&lt;p&gt;
RICHKA uses HTTP streaming for the realtime transmitting of the
progress ratio among servers. This feature is to continue send
application data little by little formatted with HTTP chunked
encoding. During sending them, the TCP connection is kept to open. The
HTTP streaming is available on general high-level web server
frameworks as well and we are ready to apply to product services
without taking care the underlying protocol format by
ourselves. However, we need to understand the restriction that the
HTTP connection is per URL. The restriction is simple, but we
sometimes encounter difficulties on practical service products.
&lt;/p&gt;

&lt;p&gt;
In the case of RICHKA, when users click a button to generate videos on
editing pages, it redirects users to top page to see the progress
ration on the video list so that users can edit other videos during
generation videos. Then, the TCP connection between web browsers and
web servers are disconnected in redirecting because of the restriction
and the progress reporting from video servers don't reach to web
browsers. To enable to show the realtime progress after HTTP
redirecting, RICHKA has a dedicated server side processing and this
post explains how RICHKA does. There are several alternatives to
realize this feature, but RICHKA doesn't depend on additional external
services and the internal architecture is also simple and straight
forward. I think this architecture could be applied to general use
cases and I hope this post provides some hints to readers of this
blog.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgff7a04a" class="outline-2"&gt;
&lt;h2 id="orgff7a04a"&gt;Technical Restriction of HTTP streaming&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgff7a04a"&gt;
&lt;p width="1500px"&gt;
&lt;img src="https://cocktailmake.github.io/images/progress-display-of-video-generation/restriction.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
The figure above represents the detail procedure how the progress reporting
with the HTTP streaming is blocked. The bottom is the GUI of RICHKA
and the left side is the editing page to input user data and the right
side is the top page listing up users' videos. The blue arrow
represents the HTTP redirect to navigate users to a top page and it is
triggered when users click the button of video generation on the
editing pages. In the timing, the HTTP streaming response from web
servers are disconnected and the top page can't get the further
progress ratio. The detail procedure in the figure is below.
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;On edit pages, when users click a button to generate videos, it sends a HTTP request with XMLHttpRequest to one of web serves via load balancer. Then the browser is redirect to the top page listing video data.&lt;/li&gt;
&lt;li&gt;The Web server delegates the video generation to one of video servers with sending a HTTP request again. The video server loads a video template and start to generate a video&lt;/li&gt;
&lt;li&gt;During generating, the video server sends the progress ratio with HTTP chunked encoding whose application data is JSON format to the web server.&lt;/li&gt;
&lt;li&gt;The web server transfers the progress ratio received from the video server, but the TCP connection with the web browser has been already disconnected and the data can't reach it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
For a reference, the chunked transfer encoding is like this. In
general, CGI scripts response with using it. Content-Length header is
not used because the expected data size is not known beforehand. A
chunked data starts with the payload size and it ends with a line
break CR LF. In the final chunk, we need to send an empty chunked data
to notify it is last one to the receiver. In RICHKA, the application
data is the progress ratio formatted with JSON.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;HTTP/1.1 200 OK
Content-Type: text/plain
Transfer-Encoding: chunked

5\r\n
Hello\r\n
6\r\n
RICHKA\r\n
0\r\n
\r\n
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgf793d73" class="outline-2"&gt;
&lt;h2 id="orgf793d73"&gt;Realtime Display of Video Generation Progress after HTTP Redirect&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf793d73"&gt;
&lt;p width="1500px"&gt;
&lt;img src="https://cocktailmake.github.io/images/progress-display-of-video-generation/solution.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
To resolve this restriction deriving from the HTTP connection per URL,
RICHKA realizes the realtime feedback of progress ratio with the
architecture above for the specific case of redirecting. The detail procedure is below.
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;ditto with the prior section&lt;/li&gt;
&lt;li&gt;The web server forks a dedicated process to communicate with the video server. It sends a HTTP request and delegates the video generation. In this timing, the TCP connection is disconnected with the web browser because of the redirection.&lt;/li&gt;
&lt;li&gt;The forked process is still alive and it continues to receive the progress ratio from video serves with HTTP chunked encoding.&lt;/li&gt;
&lt;li&gt;Every when the forked process receives the progress ratio, it saves into database as the progress data for the video data.&lt;/li&gt;
&lt;li&gt;After redirecting, the top page periodically sends HTTP GET request to the web server and show the progress data on GUI.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
At the last step, there is alternative method with WebSocket protocol,
but RICHKA doesn't use because general users access from their company
offices and it is general their networks apply HTTP
proxies. Unfortunately, some of HTTP proxies block WebSocket
connection to enhance the web security. Therefore, RICHKA
intentionally applies the traditional method to make more stable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>Infra</category><category>RICHKA</category><guid>https://cocktailmake.github.io/posts/progress-display-of-video-generation/</guid><pubDate>Sat, 16 May 2020 09:07:20 GMT</pubDate></item><item><title>Big picture of RICHKA</title><link>https://cocktailmake.github.io/posts/big-picture-of-richka/</link><dc:creator>Cocktail-Make</dc:creator><description>&lt;p&gt;
Posted by Hitoshi Uchida
&lt;/p&gt;

&lt;div id="outline-container-org6f4ae8f" class="outline-2"&gt;
&lt;h2 id="org6f4ae8f"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6f4ae8f"&gt;
&lt;p&gt;
This is the first post from our engineer team.
&lt;/p&gt;

&lt;p&gt;
We periodically share technological topics such as new integrated
features into products and new technologies we are interested in and
prototype implementations to evaluate the feasibility whether they are
worth developing as actual business service.
&lt;/p&gt;

&lt;p&gt;
In this post, we introduce a web application RICHKA which enables
users to easily create high quality videos on web browsers,
especially, the development environment and the server infra
structures and the processing sequence of the primary function to
generate high quality videos with using image/videos users upload. The
architecture and internal processing are generally complicated than
general services such as EC and blog and chat system because the size
of video files are huge and we need to carefully take care the load of
servers such as delegating heavy processing to other dedicated video
servers and applying delaying processing to postpone heavy processing
later. And the load of file storage is also high and we need to take
care the timing to load files from network storage. On GUI, we don't
initially load video contents because it increases the load of web
servers and delay the response and influences to UX. Instead, we load
thumbnails of any videos on GUI and load video contents only when they
are played on video player.
&lt;/p&gt;

&lt;p&gt;
RICHKA has some dedicated video engines to generate high quality
videos with using well designed video templates created by expert
designers. To make the representation of videos richer, video servers
enable to change not only input texts and image/video material files
users upload, but also font family and color scheme and BGM in
realtime during generating videos. The load of video generation
processing is very heavy and we apply lots of optimization to reduce
the generation time with keeping the high quality. Therefore video
services demand higher development skills of web applications.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgc1ea362" class="outline-2"&gt;
&lt;h2 id="orgc1ea362"&gt;RICHKA Development Environment&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc1ea362"&gt;
&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/big-picture-of-richka/technologies-building-richka.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
The engineer team is basically remote and more than 90% live in
foreign countries. We hire only high skill experts who have strong
skills of web technologies and web application development. We will
describe our team more on another post later.
&lt;/p&gt;

&lt;p&gt;
We always apply new emerged technologies into products to enhance the
features and reduce development cost. It is free for our engineers to
propose them to see the feasibility and the side effect. The speed of
try and error is faster than general teams because our team is
completely flat and every member has the privilege to propose new
ideas among members. If clear and reasonable purposes are explained to
the team, they are basically accepted.
&lt;/p&gt;

&lt;p&gt;
Regarding server side, it is based on Python and Django and we use
additional 42 Python packages such as Django extensions and
image/video manipulation and statistics and crypt. The current total
lines of Django is around 12200.
&lt;/p&gt;

&lt;p&gt;
Regarding front end, we use abut 20 OSS libraries to build the
functional GUI such as jQuery, cropper.js, smartcrop.js, Vue, Bootstrap
and so on. The current total lines of JavaScript codes we developed is
around 13000.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org553e007" class="outline-4"&gt;
&lt;h4 id="org553e007"&gt;OS&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org553e007"&gt;
&lt;p&gt;
Ubuntu Server
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf794a78" class="outline-4"&gt;
&lt;h4 id="orgf794a78"&gt;Programming Language&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgf794a78"&gt;
&lt;p&gt;
Python, JavaScript, HTML5, CSS3, JSX, Bash
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9befae5" class="outline-4"&gt;
&lt;h4 id="org9befae5"&gt;Server Side Technologies&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org9befae5"&gt;
&lt;p&gt;
Django, MySQL, HTTP2, Web API, video generation engine, image processing,
multi core processing, load distribution
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf126c7a" class="outline-4"&gt;
&lt;h4 id="orgf126c7a"&gt;Front End&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgf126c7a"&gt;
&lt;p&gt;
jQuery, jQuery UI, Vue.js, video.js, cropper.js, smartcrop.js, Bootstrap and much more
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga8932fe" class="outline-4"&gt;
&lt;h4 id="orga8932fe"&gt;Regression Test&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orga8932fe"&gt;
&lt;p&gt;
Jenkins, Django UnitTest, Selenium
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org94d42eb" class="outline-2"&gt;
&lt;h2 id="org94d42eb"&gt;Sequence of video generation&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org94d42eb"&gt;
&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/big-picture-of-richka/video-generation-sequence.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
RICHKA is behind a load balancer to distribute lots of coming HTTP
requests to multiple web servers. And to enable simultaneous video
generation at a time, the video generation requests are also
distributed to multiple video servers. The user data such as
images/videos users upload and video template files used by video
engine are stored on an external network storage. They are retrieved
from both web servers and video servers.
&lt;/p&gt;

&lt;p&gt;
The summary sequence of video generation is,
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Users click a button to generate videos and the requests reach one of web servers via the load balancer.&lt;/li&gt;
&lt;li&gt;The web server retrieves the user data such as selected video template and font families and color scheme and BGM and make HTTP requests and send to one of video servers.&lt;/li&gt;
&lt;li&gt;The web server receives the generation progress in realtime and store into the database to show the progress on GUI.&lt;/li&gt;
&lt;li&gt;When the generations have been done, the web server downloads the generated videos and store into the file storage.&lt;/li&gt;
&lt;li&gt;The web server sends the generated videos to web browsers and video player loads them and users can see on GUI.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>Infra</category><category>RICHKA</category><guid>https://cocktailmake.github.io/posts/big-picture-of-richka/</guid><pubDate>Tue, 05 May 2020 08:02:40 GMT</pubDate></item></channel></rss>