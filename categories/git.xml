<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RICHKA Developer Blog (Posts about git)</title><link>https://cocktailmake.github.io/</link><description></description><atom:link href="https://cocktailmake.github.io/categories/git.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:"&gt;RICHKA&lt;/a&gt; </copyright><lastBuildDate>Wed, 20 Jan 2021 07:06:10 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Our Git Habit of Narration Recording project</title><link>https://cocktailmake.github.io/posts/narration-recording-git-habit/</link><dc:creator>Duc To</dc:creator><description>&lt;div id="outline-container-orgefcd2c7" class="outline-2"&gt;
&lt;h2 id="orgefcd2c7"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgefcd2c7"&gt;
&lt;p&gt;
We released a new web application called &lt;b&gt;&lt;span style="color: red"&gt;ナレ撮り&lt;/span&gt;&lt;/b&gt;
which enables users to record the voice as narration on web browsers
and combine them with video sources and generate videos in last month.
In this post, we introduce our daily Git habit how to handle multiple
branches to add new features and release official versions and hotfix
releasing for bug fixing as professional development.
&lt;/p&gt;

&lt;p&gt;
Our development team refers to a good article of &lt;a href="https://nvie.com/posts/a-successful-git-branching-model/"&gt;Git Workflow&lt;/a&gt; and the
format of commit log of &lt;a href="https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit"&gt;AngularJS guys&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/narration-recording-git-habit/git-model@2x.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge7f2ed0" class="outline-2"&gt;
&lt;h2 id="orge7f2ed0"&gt;Branches&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge7f2ed0"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1003e5e" class="outline-3"&gt;
&lt;h3 id="org1003e5e"&gt;Feature branches&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1003e5e"&gt;
&lt;p&gt;
When you develop new features or fix bugs and the total modified lines
will be relatively larger compared with prior ones you developed, then
you should create new branches and merge after finishing the
developments as general Git culture.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4b1fd48" class="outline-3"&gt;
&lt;h3 id="org4b1fd48"&gt;Stage branch&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4b1fd48"&gt;
&lt;p&gt;
It is a primary development branch and feature branches will be merged
to stage branch after successfully tested and reviewed.
&lt;/p&gt;

&lt;p&gt;
This branch is a head of any other branches, but there is a
possibility any degrade happens with merging the working branches into
this branch. Therefore we can't release this branch as official
version right now.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org160236d" class="outline-3"&gt;
&lt;h3 id="org160236d"&gt;Release branches&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org160236d"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;On each release, we create a new release branch based on latest
stage branch for both recording and video repositories (even though
there may not have any changes since last release for one
repository).&lt;/li&gt;
&lt;li&gt;The release branch should be named as &lt;b&gt;&lt;b&gt;release/[VERSION_NUMBER]&lt;/b&gt;&lt;/b&gt;.&lt;/li&gt;
&lt;li&gt;Sometimes a hotfix releasing is needed and we can apply hotfix commits to
the release branches&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/narration-recording-git-habit/hotfix-branches@2x.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0d02ab1" class="outline-3"&gt;
&lt;h3 id="org0d02ab1"&gt;Tags&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0d02ab1"&gt;
&lt;p&gt;
Tags are created with the release branches of both recording and video repositories
after the final reviewing the release has been successfully passed.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/narration-recording-git-habit/git-model@2x.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbe946ce" class="outline-2"&gt;
&lt;h2 id="orgbe946ce"&gt;Commit logs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbe946ce"&gt;
&lt;p&gt;
We apply &lt;a href="https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit"&gt;3rd party knowledge&lt;/a&gt; for the format of commit logs from AngularJS guys.
We follow the tiny rule in the article as below.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;type&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;scope&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;: &amp;lt;subject&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Type : Must be one of the following:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;| Type     | Meaning                                                                                                |
|----------+--------------------------------------------------------------------------------------------------------|
| feat     | A new feature                                                                                          |
| fix      | A bug fix                                                                                              |
| docs     | Documentation only changes                                                                             |
| style    | Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc) |
| refactor | A code change that neither fixes a bug nor adds a feature                                              |
| perf     | A code change that improves performance                                                                |
| test     | Adding missing or correcting existing tests                                                            |
| chore    | Changes to the build process or auxiliary tools and libraries such as documentation generation         |
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For examples, our commit logs would be below.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fix(gui): Fixed file uploading. Refs #REC-XXX
fix(video): Make ffmpeg video generation more stable. Refs #REC-XXX
test(django): Added new tests for admin contract page. Refs #REC-XXX
feat(gui) : Added Narration script function. Refs #REC-XXX 
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc4aa91d" class="outline-2"&gt;
&lt;h2 id="orgc4aa91d"&gt;Utilize special keywords in commit logs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc4aa91d"&gt;
&lt;p&gt;
When we commit, we fill understandable commit logs and use special
keywords such as Refs #TICKET_NUMBER to make the references with the
corresponding tickets.  Therefore before committing, we create tickets
at first and make the references with the commit logs.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgcca7d04" class="outline-2"&gt;
&lt;h2 id="orgcca7d04"&gt;Rules for merging&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgcca7d04"&gt;
&lt;p&gt;
When we merge branches, we have a rule to add "&lt;b&gt;&lt;b&gt;–no-ff&lt;/b&gt;&lt;/b&gt;" as command
option to suppress fast-forward of the default behavior of Git.
&lt;/p&gt;

&lt;p&gt;
For examples: &lt;code&gt;git merge --no-ff feature/REC-00&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf39a98b" class="outline-2"&gt;
&lt;h2 id="orgf39a98b"&gt;Modification of DB models&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf39a98b"&gt;
&lt;p&gt;
When we modify the models of Django with development tasks, we do that
on stage branch at first. We sometimes encountered DB migration issue
on stage branch and it also caused runtime issues on our individual
working branches. To prevent from happening the same issue, we applied
a simple work flow to modify DB models only on stage branch.
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;If you need to modify models of Django, checkout stage branch at first&lt;/li&gt;
&lt;li&gt;Modify the models and execute migration against staging DB&lt;/li&gt;
&lt;li&gt;Merge stage branch into your working branches&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>git</category><guid>https://cocktailmake.github.io/posts/narration-recording-git-habit/</guid><pubDate>Sun, 20 Sep 2020 03:00:00 GMT</pubDate></item><item><title>Emacs modeline enhancement for Git diff</title><link>https://cocktailmake.github.io/posts/emacs-modeline-enhancement-for-git-diff/</link><dc:creator>Hitoshi Uchida</dc:creator><description>&lt;div id="outline-container-orgc1a9ee9" class="outline-2"&gt;
&lt;h2 id="orgc1a9ee9"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc1a9ee9"&gt;
&lt;p&gt;
Emacs has a built-in function vc-mode to work with version control
systems such as CVS, Subversion, Git and so on. It enables to show
diff / commit logs and commit codes without working with the
dedicated commands on terminal applications. For Git, we can operate
general git commands such as status / log / diff / checkout / commit /
push. The screenshot below is a sample of vc-diff command to show git
diff.
&lt;/p&gt;

&lt;p&gt;
In this post, a utility function to enhance vc-diff command for Git is
introduced with changing the behavior of the internal function of
vc-git.el and improve the modeline for efficient coding.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/emacs-modeline-enhancement-for-git-diff/vc.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orge646e04" class="outline-2"&gt;
&lt;h2 id="orge646e04"&gt;Show the numbers of diff lines on modeline&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge646e04"&gt;
&lt;p&gt;
When we open a file on Emacs tracked by Git, the branch name is shown
on the modeline. This build-in feature is enabled by a lisp function
vc-git-mode-line-string below defined in vc-git.el. We will extend
the build-in behavior with &lt;b&gt;&lt;b&gt;defadvice&lt;/b&gt;&lt;/b&gt; to show the numbers of diff
lines on modeline.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;+---[/usr/share/emacs/26.3/lisp/vc/vc-git.el.gz:339]&lt;/span&gt;
&lt;span class="nv"&gt;| (defun vc-git-mode-line-string (file)&lt;/span&gt;
&lt;span class="nv"&gt;|&lt;/span&gt;   &lt;span class="s"&gt;"Return a string for `vc-mode-line' to put in the mode line for FILE."&lt;/span&gt;
&lt;span class="nv"&gt;|   (let* ((rev (vc-working-revision file 'Git))&lt;/span&gt;
&lt;span class="nv"&gt;|&lt;/span&gt;          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;disp-rev&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;vc-git--symbolic-ref&lt;/span&gt; &lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;|                        (substring rev 0 7)))&lt;/span&gt;
&lt;span class="nv"&gt;|&lt;/span&gt;          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;def-ml&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;vc-default-mode-line-string&lt;/span&gt; &lt;span class="ss"&gt;'Git&lt;/span&gt; &lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nv"&gt;|          (help-echo (get-text-property 0 'help-echo def-ml))&lt;/span&gt;
&lt;span class="nv"&gt;|&lt;/span&gt;          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;face&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;get-text-property&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ss"&gt;'face&lt;/span&gt; &lt;span class="nv"&gt;def-ml&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="nv"&gt;|     (propertize (concat (substring def-ml 0 4) disp-rev)&lt;/span&gt;
&lt;span class="nv"&gt;|&lt;/span&gt;                 &lt;span class="ss"&gt;'face&lt;/span&gt; &lt;span class="nv"&gt;face&lt;/span&gt;
&lt;span class="err"&gt;|&lt;/span&gt;                 &lt;span class="ss"&gt;'help-echo&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;concat&lt;/span&gt; &lt;span class="nv"&gt;help-echo&lt;/span&gt; &lt;span class="s"&gt;"\nCurrent revision: "&lt;/span&gt; &lt;span class="nv"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="nv"&gt;+---&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
To show the information of git diff, we can get each number of
added/deleted lines with using &lt;b&gt;&lt;b&gt;git diff –numstat – FILE_NAME&lt;/b&gt;&lt;/b&gt;. An
sample output with the command is below and the 1st column is the
numbers of lines added to files and the 2nd one is the ones of deleted
lines. If we execute with specifying a filename, we can get only for the file.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git diff --numstat --
7       6       .bashrc
2       1       .bashrc-common
34      9       .emacs
1       0       .folders
4       4       .ssh/config-home
5       1       emacslib/.aspell.en.pws
4       3       emacslib/meeting-dev.template
2       2       emacslib/my-edit.el
108     11      emacslib/my-org.el
4       60      emacslib/my-wl.el
101     55      emacslib/wl-common.el
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The lisp function below is the final output of the utility function.
The number of added lines is shown with green3 and the one of deleted lines is shown
with a color predefined by font-lock-warning-face.
If there is no diff on the opened file, "✔" is shown.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;defadvice&lt;/span&gt; &lt;span class="nv"&gt;vc-git-mode-line-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;after&lt;/span&gt; &lt;span class="nv"&gt;plus-minus&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;compile&lt;/span&gt; &lt;span class="nv"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;"Show the information of git diff on modeline."&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;ad-return-value&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;concat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;propertize&lt;/span&gt; &lt;span class="nv"&gt;ad-return-value&lt;/span&gt; &lt;span class="ss"&gt;'face&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:foreground&lt;/span&gt; &lt;span class="s"&gt;"white"&lt;/span&gt; &lt;span class="ss"&gt;:weight&lt;/span&gt; &lt;span class="nv"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
		&lt;span class="s"&gt;" ["&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;plus-minus&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;vc-git--run-command-string&lt;/span&gt;
				   &lt;span class="nv"&gt;file&lt;/span&gt; &lt;span class="s"&gt;"diff"&lt;/span&gt; &lt;span class="s"&gt;"--numstat"&lt;/span&gt; &lt;span class="s"&gt;"--"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
		  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;plus-minus&lt;/span&gt;
		       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;string-match&lt;/span&gt; &lt;span class="s"&gt;"^\\([0-9]+\\)\t\\([0-9]+\\)\t"&lt;/span&gt; &lt;span class="nv"&gt;plus-minus&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
		       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;concat&lt;/span&gt;
			&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;propertize&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"+%s"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;match-string&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;plus-minus&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ss"&gt;'face&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:foreground&lt;/span&gt; &lt;span class="s"&gt;"green3"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
			&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;propertize&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"-%s"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;match-string&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nv"&gt;plus-minus&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ss"&gt;'face&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:inherit&lt;/span&gt; &lt;span class="nv"&gt;font-lock-warning-face&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
		    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;propertize&lt;/span&gt; &lt;span class="s"&gt;"✔"&lt;/span&gt; &lt;span class="ss"&gt;'face&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:foreground&lt;/span&gt; &lt;span class="s"&gt;"green3"&lt;/span&gt; &lt;span class="ss"&gt;:weight&lt;/span&gt; &lt;span class="nv"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
		&lt;span class="s"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
As a screenshot below, the diff information is shown on modeline with the branch name.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/emacs-modeline-enhancement-for-git-diff/modeline.png" alt="nil"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>git</category><guid>https://cocktailmake.github.io/posts/emacs-modeline-enhancement-for-git-diff/</guid><pubDate>Sun, 30 Aug 2020 13:00:00 GMT</pubDate></item><item><title>Improvement of Git commands with fzf</title><link>https://cocktailmake.github.io/posts/improvement-of-git-commands-with-fzf/</link><dc:creator>Hitoshi Uchida</dc:creator><description>&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/improvement-of-git-commands-with-fzf/demo-log.png" alt="nil"&gt;
&lt;/p&gt;

&lt;div id="outline-container-org113eb03" class="outline-2"&gt;
&lt;h2 id="org113eb03"&gt;Abstract&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org113eb03"&gt;
&lt;p&gt;
We manage source codes with Git in development projects. In general,
when we check the branches, we use a &lt;b&gt;git branch&lt;/b&gt; command below to
find the candidate and we retrieve the branch with &lt;b&gt;git checkout&lt;/b&gt; in
later step. Or we directly checkout a branch when we know the name
beforehand.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git branch
  bug/RICHIKA-1178
  bug/RICHIKA-2234
  bug/RICHIKA-2510
  feature/RICHIKA-1141
  feature/RICHIKA-1143
  feature/RICHIKA-1155
  feature/RICHIKA-1364
  feature/RICHIKA-1390
  ...
$ git checkout feature/RICHIKA-1155
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This post describes a utility shell script to assist the Git command
operations with fzf command such as &lt;b&gt;git branche&lt;/b&gt;, &lt;b&gt;git checkout&lt;/b&gt; and
&lt;b&gt;git log&lt;/b&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org348fc55" class="outline-2"&gt;
&lt;h2 id="org348fc55"&gt;General usage of fzf&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org348fc55"&gt;
&lt;p&gt;
&lt;a href="https://github.com/junegunn/fzf"&gt;fzf&lt;/a&gt; is a powerful Linux command and enables interactive filtering which
can be used for any purpose with receiving stdout of any commands.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/improvement-of-git-commands-with-fzf/fzf.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
The fzf command is packaged in major Linux distributions. For Ubuntu,
it can be installed by apt command.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install fzf
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For examples of the usage of fzf, I interactively find files under a
specified directory with filtering parts of the file path as blow. And
it can show a preview window which we can customize what kind of data
is shown. In this sample, I showed the syntax highlighted content of
the selected file.  This command may be described on another post as
well.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/improvement-of-git-commands-with-fzf/fzf-sample.png" alt="nil"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgcf6e4db" class="outline-2"&gt;
&lt;h2 id="orgcf6e4db"&gt;Filtering Git branches by fzf&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgcf6e4db"&gt;
&lt;p&gt;
There are three commands below.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;| Command     | Feature                              |
|-------------+--------------------------------------|
| git-br-fzf  | Filtering Git branches               |
| git-co-fzf  | Checkout with filtering Git branches |
| git-log-fzf | Filtering Git commit logs            |
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The shell script combining git + fzf to assist Git operations is below.
The dependent command is only fzf.
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;is_in_git_repo&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# git rev-parse HEAD &amp;gt; /dev/null 2&amp;gt;&amp;amp;1&lt;/span&gt;
    git rev-parse HEAD &amp;gt; /dev/null
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# Filter branches.&lt;/span&gt;
git-br-fzf&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    is_in_git_repo &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="nb"&gt;local&lt;/span&gt; tags branches target
    &lt;span class="nv"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;
	git tag &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;'{print "\x1b[31;1mtag\x1b[m\t" $1}'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="nv"&gt;branches&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;
	git branch --all &lt;span class="p"&gt;|&lt;/span&gt; grep -v HEAD &lt;span class="p"&gt;|&lt;/span&gt;
	    sed &lt;span class="s2"&gt;"s/.* //"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s2"&gt;"s#remotes/[^/]*/##"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
	    sort -u &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;'{print "\x1b[34;1mbranch\x1b[m\t" $1}'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="nv"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;
	&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$tags&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$branches&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
	    fzf --no-hscroll --no-multi --delimiter&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"\t"&lt;/span&gt; -n &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
		--ansi --preview&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git log -200 --pretty=format:%s &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;+2..&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;  sed &lt;span class="s1"&gt;'s/$/../'&lt;/span&gt; &lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$target&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk -F &lt;span class="s2"&gt;"\t"&lt;/span&gt; &lt;span class="s1"&gt;'{print $2}'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# Filter branches and checkout the selected one with &amp;lt;enter&amp;gt; key,&lt;/span&gt;
git-co-fzf&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    is_in_git_repo &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
    git checkout &lt;span class="k"&gt;$(&lt;/span&gt;git-br-fzf&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# Filter commit logs. The diff is shown on the preview window.&lt;/span&gt;
git-log-fzf&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;# fshow - git commit browser&lt;/span&gt;
    is_in_git_repo &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="nv"&gt;_gitLogLineToHash&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"echo {} | grep -o '[a-f0-9]\{7\}' | head -1"&lt;/span&gt;
    &lt;span class="nv"&gt;_viewGitLogLine&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$_gitLogLineToHash&lt;/span&gt;&lt;span class="s2"&gt; | xargs -I % sh -c 'git show --color=always %'"&lt;/span&gt;
    git log --graph --color&lt;span class="o"&gt;=&lt;/span&gt;always &lt;span class="se"&gt;\&lt;/span&gt;
	--format&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"%C(auto)%h%d [%an] %s %C(black)%C(bold)%cr"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
    fzf --ansi --no-sort --reverse --tiebreak&lt;span class="o"&gt;=&lt;/span&gt;index --bind&lt;span class="o"&gt;=&lt;/span&gt;ctrl-s:toggle-sort &lt;span class="se"&gt;\&lt;/span&gt;
	--preview&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$_viewGitLogLine&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
	--bind &lt;span class="s2"&gt;"ctrl-m:execute:&lt;/span&gt;
&lt;span class="s2"&gt;		(grep -o '[a-f0-9]\{7\}' | head -1 |&lt;/span&gt;
&lt;span class="s2"&gt;		xargs -I % sh -c 'git show --color=always % | less -R') &amp;lt;&amp;lt; 'FZF-EOF'&lt;/span&gt;
&lt;span class="s2"&gt;		{}&lt;/span&gt;
&lt;span class="s2"&gt;FZF-EOF"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;git-br-fzf&lt;/b&gt; and &lt;b&gt;git-co-fzf&lt;/b&gt; work like this.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/improvement-of-git-commands-with-fzf/demo-branch.png" alt="nil"&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;git-log-fzf&lt;/b&gt; works like this.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="https://cocktailmake.github.io/images/improvement-of-git-commands-with-fzf/demo-log.png" alt="nil"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>fzf</category><category>git</category><guid>https://cocktailmake.github.io/posts/improvement-of-git-commands-with-fzf/</guid><pubDate>Sat, 04 Jul 2020 14:30:00 GMT</pubDate></item></channel></rss>